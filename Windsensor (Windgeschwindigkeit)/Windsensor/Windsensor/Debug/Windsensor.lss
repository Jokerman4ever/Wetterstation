
Windsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00802008  00802008  000008dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003eb0  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b00  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a68  00000000  00000000  000073bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00007e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000284b  00000000  00000000  00007fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a4  00000000  00000000  0000a80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000acb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  38:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_14>
  3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_45>
  b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e0 e4       	ldi	r30, 0x40	; 64
 210:	f8 e0       	ldi	r31, 0x08	; 8
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a8 30       	cpi	r26, 0x08	; 8
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a8 e0       	ldi	r26, 0x08	; 8
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a5 31       	cpi	r26, 0x15	; 21
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	0e 94 43 01 	call	0x286	; 0x286 <main>
 232:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

00000236 <__bad_interrupt>:
 236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <clock_init>:
#include "clock.h"

void clock_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;
 23a:	e0 e5       	ldi	r30, 0x50	; 80
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));	
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	81 ff       	sbrs	r24, 1
 248:	fd cf       	rjmp	.-6      	; 0x244 <clock_init+0xa>
	CCP = CCP_IOREG_gc;
 24a:	88 ed       	ldi	r24, 0xD8	; 216
 24c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 24e:	e0 e4       	ldi	r30, 0x40	; 64
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	90 83       	st	Z, r25
	CCP = CCP_IOREG_gc;
 256:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSADIV_8_gc;
 258:	84 e1       	ldi	r24, 0x14	; 20
 25a:	81 83       	std	Z+1, r24	; 0x01
 25c:	08 95       	ret

0000025e <timer_init>:
    }
}

void timer_init()
{
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
 25e:	e0 e0       	ldi	r30, 0x00	; 0
 260:	f8 e0       	ldi	r31, 0x08	; 8
 262:	87 e0       	ldi	r24, 0x07	; 7
 264:	80 83       	st	Z, r24
	TCC0.CTRLB = TC_WGMODE_NORMAL_gc;
 266:	11 82       	std	Z+1, r1	; 0x01
	TCC0.PER = 39;							// Timertakt = (Cpu / (Prescaler*Per))  Cpu=4 MHz  ; Prescaler=1024 ; Per = 3600  => 1 Hz => 1 x pro sekunde
 268:	87 e2       	ldi	r24, 0x27	; 39
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	86 a3       	std	Z+38, r24	; 0x26
 26e:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CNT = 0x00;
 270:	10 a2       	std	Z+32, r1	; 0x20
 272:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.INTCTRLA = 0x03;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	86 83       	std	Z+6, r24	; 0x06
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; 
 278:	e0 ea       	ldi	r30, 0xA0	; 160
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	82 81       	ldd	r24, Z+2	; 0x02
 27e:	87 60       	ori	r24, 0x07	; 7
 280:	82 83       	std	Z+2, r24	; 0x02
	sei();
 282:	78 94       	sei
 284:	08 95       	ret

00000286 <main>:
#include "twi_wind.h"
#include "clock.h"

int main(void)
{
	clock_init();
 286:	0e 94 1d 01 	call	0x23a	; 0x23a <clock_init>
	spi_wind_masterinit();
 28a:	0e 94 bf 01 	call	0x37e	; 0x37e <spi_wind_masterinit>
	timer_init();
 28e:	0e 94 2f 01 	call	0x25e	; 0x25e <timer_init>
 292:	ff cf       	rjmp	.-2      	; 0x292 <main+0xc>

00000294 <__vector_14>:
int16_t winkeldifferenz = 0;
float timervalue = 0.01;
float radius = 0.022;
float windgeschwindigkeit = 0;   
ISR(TCC0_OVF_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31

	if (cnt==0)
 2b6:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <cnt>
 2ba:	81 11       	cpse	r24, r1
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <__vector_14+0x46>
	{
		prewinkel = spi_get_angle();
 2be:	0e 94 cb 01 	call	0x396	; 0x396 <spi_get_angle>
 2c2:	0e 94 c5 02 	call	0x58a	; 0x58a <__fixsfsi>
 2c6:	60 93 13 20 	sts	0x2013, r22	; 0x802013 <prewinkel>
 2ca:	70 93 14 20 	sts	0x2014, r23	; 0x802014 <prewinkel+0x1>
		cnt++;
 2ce:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <cnt>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <cnt>
 2d8:	41 c0       	rjmp	.+130    	; 0x35c <__vector_14+0xc8>
	}
	else
	{
		curwinkel = spi_get_angle();
 2da:	0e 94 cb 01 	call	0x396	; 0x396 <spi_get_angle>
 2de:	0e 94 c5 02 	call	0x58a	; 0x58a <__fixsfsi>
 2e2:	60 93 11 20 	sts	0x2011, r22	; 0x802011 <curwinkel>
 2e6:	70 93 12 20 	sts	0x2012, r23	; 0x802012 <curwinkel+0x1>
		cnt = 0;
 2ea:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <cnt>
		winkeldifferenz = spi_angledif(prewinkel,curwinkel);
 2ee:	60 91 11 20 	lds	r22, 0x2011	; 0x802011 <curwinkel>
 2f2:	70 91 12 20 	lds	r23, 0x2012	; 0x802012 <curwinkel+0x1>
 2f6:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <prewinkel>
 2fa:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <prewinkel+0x1>
 2fe:	0e 94 05 02 	call	0x40a	; 0x40a <spi_angledif>
 302:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <winkeldifferenz>
 306:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <winkeldifferenz+0x1>
		windgeschwindigkeit = ((winkeldifferenz)/(timervalue)*radius);				// Einheit und Wert passen nicht
		windgeschwindigkeit = (windgeschwindigkeit * -1)/3.6;						// Kommt in etwa hin
 30a:	bc 01       	movw	r22, r24
 30c:	99 0f       	add	r25, r25
 30e:	88 0b       	sbc	r24, r24
 310:	99 0b       	sbc	r25, r25
 312:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__floatsisf>
 316:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <timervalue>
 31a:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <timervalue+0x1>
 31e:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <timervalue+0x2>
 322:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <timervalue+0x3>
 326:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divsf3>
 32a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 32e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 332:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <__data_start+0x2>
 336:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <__data_start+0x3>
 33a:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
 33e:	90 58       	subi	r25, 0x80	; 128
 340:	26 e6       	ldi	r18, 0x66	; 102
 342:	36 e6       	ldi	r19, 0x66	; 102
 344:	46 e6       	ldi	r20, 0x66	; 102
 346:	50 e4       	ldi	r21, 0x40	; 64
 348:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divsf3>
 34c:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <__data_end>
 350:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <__data_end+0x1>
 354:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0x2>
 358:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <__data_end+0x3>
	}
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <spi_wind_masterinit>:
	while(!(SPIC.STATUS & SPI_IF_bm));
	datalow = SPIC.DATA;
	_delay_us(1);
	PORTC.OUTTGL = CHIPSELECT;
	return ((datahigh<<8) | datalow);
}
 37e:	e0 e4       	ldi	r30, 0x40	; 64
 380:	f6 e0       	ldi	r31, 0x06	; 6
 382:	80 eb       	ldi	r24, 0xB0	; 176
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	80 e1       	ldi	r24, 0x10	; 16
 388:	85 83       	std	Z+5, r24	; 0x05
 38a:	e0 ec       	ldi	r30, 0xC0	; 192
 38c:	f8 e0       	ldi	r31, 0x08	; 8
 38e:	80 81       	ld	r24, Z
 390:	84 65       	ori	r24, 0x54	; 84
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <spi_get_angle>:
	uint16_t anglehex = 0x00;
	float angledec = 0x00;
	uint8_t test;
	uint8_t datahigh = 0x13;
	uint8_t datalow = 0x37;
	PORTC.OUTTGL = CHIPSELECT;
 396:	80 e1       	ldi	r24, 0x10	; 16
 398:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <spi_get_angle+0x8>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <spi_get_angle+0xe>
	_delay_us(1);
	test=SPIC.STATUS;
 3a4:	e0 ec       	ldi	r30, 0xC0	; 192
 3a6:	f8 e0       	ldi	r31, 0x08	; 8
 3a8:	82 81       	ldd	r24, Z+2	; 0x02
	SPIC.DATA=DUMMY;
 3aa:	13 82       	std	Z+3, r1	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
 3ac:	82 81       	ldd	r24, Z+2	; 0x02
 3ae:	88 23       	and	r24, r24
 3b0:	ec f7       	brge	.-6      	; 0x3ac <spi_get_angle+0x16>
	datahigh = SPIC.DATA;
 3b2:	e0 ec       	ldi	r30, 0xC0	; 192
 3b4:	f8 e0       	ldi	r31, 0x08	; 8
 3b6:	63 81       	ldd	r22, Z+3	; 0x03
	test=SPIC.STATUS;
 3b8:	82 81       	ldd	r24, Z+2	; 0x02
	SPIC.DATA=DUMMY;
 3ba:	13 82       	std	Z+3, r1	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
 3bc:	82 81       	ldd	r24, Z+2	; 0x02
 3be:	88 23       	and	r24, r24
 3c0:	ec f7       	brge	.-6      	; 0x3bc <spi_get_angle+0x26>
	datalow = SPIC.DATA;
 3c2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 3c6:	92 e0       	ldi	r25, 0x02	; 2
 3c8:	9a 95       	dec	r25
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <spi_get_angle+0x32>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <spi_get_angle+0x38>
	_delay_us(1);
	PORTC.OUTTGL = CHIPSELECT;
 3ce:	90 e1       	ldi	r25, 0x10	; 16
 3d0:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
	anglehex = ((datahigh<<2) | (datalow>>6));
	angledec = (((float)anglehex/(float)1024)*(float)360);
	return angledec;
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	82 95       	swap	r24
 3e0:	86 95       	lsr	r24
 3e2:	86 95       	lsr	r24
 3e4:	83 70       	andi	r24, 0x03	; 3
 3e6:	68 2b       	or	r22, r24
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__floatunsisf>
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e8       	ldi	r20, 0x80	; 128
 3f6:	5a e3       	ldi	r21, 0x3A	; 58
 3f8:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	44 eb       	ldi	r20, 0xB4	; 180
 402:	53 e4       	ldi	r21, 0x43	; 67
 404:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
}
 408:	08 95       	ret

0000040a <spi_angledif>:

int16_t differenz = -360;
int16_t spi_angledif(int16_t pre, int16_t cur)
{
	int16_t differenz = (cur-pre);
 40a:	68 1b       	sub	r22, r24
 40c:	79 0b       	sbc	r23, r25

	if (differenz>180)
 40e:	65 3b       	cpi	r22, 0xB5	; 181
 410:	71 05       	cpc	r23, r1
 412:	44 f0       	brlt	.+16     	; 0x424 <spi_angledif+0x1a>
	{
		differenz = (differenz - 360) % 360;
 414:	cb 01       	movw	r24, r22
 416:	88 56       	subi	r24, 0x68	; 104
 418:	91 40       	sbci	r25, 0x01	; 1
		return differenz;
 41a:	68 e6       	ldi	r22, 0x68	; 104
 41c:	71 e0       	ldi	r23, 0x01	; 1
 41e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__divmodhi4>
 422:	08 95       	ret
	}
	else if (differenz<-180)
 424:	6c 34       	cpi	r22, 0x4C	; 76
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	78 07       	cpc	r23, r24
 42a:	44 f4       	brge	.+16     	; 0x43c <spi_angledif+0x32>
	{
		differenz = (differenz + 360) % 360;
 42c:	cb 01       	movw	r24, r22
 42e:	88 59       	subi	r24, 0x98	; 152
 430:	9e 4f       	sbci	r25, 0xFE	; 254
		return differenz;
 432:	68 e6       	ldi	r22, 0x68	; 104
 434:	71 e0       	ldi	r23, 0x01	; 1
 436:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__divmodhi4>
 43a:	08 95       	ret
	}
	else
	{
		return differenz;
 43c:	86 2f       	mov	r24, r22
 43e:	97 2f       	mov	r25, r23
	}
}
 440:	08 95       	ret

00000442 <twi_wind_sendack>:
}


twi_wind_sendack()
{
	TWIE.SLAVE.CTRLB |= TWI_SLAVE_ACKACT_bm | TWI_SLAVE_CMD_RESPONSE_gc;
 442:	e0 ea       	ldi	r30, 0xA0	; 160
 444:	f4 e0       	ldi	r31, 0x04	; 4
 446:	81 85       	ldd	r24, Z+9	; 0x09
 448:	87 60       	ori	r24, 0x07	; 7
 44a:	81 87       	std	Z+9, r24	; 0x09
 44c:	08 95       	ret

0000044e <__vector_45>:
}

uint16_t angle = 0;
uint8_t daten = 0xAA;
ISR(TWIE_TWIS_vect)
{
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	2f 93       	push	r18
 45a:	3f 93       	push	r19
 45c:	4f 93       	push	r20
 45e:	5f 93       	push	r21
 460:	6f 93       	push	r22
 462:	7f 93       	push	r23
 464:	8f 93       	push	r24
 466:	9f 93       	push	r25
 468:	af 93       	push	r26
 46a:	bf 93       	push	r27
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	angle = spi_get_angle();
 470:	0e 94 cb 01 	call	0x396	; 0x396 <spi_get_angle>
 474:	0e 94 cc 02 	call	0x598	; 0x598 <__fixunssfsi>
 478:	60 93 0f 20 	sts	0x200F, r22	; 0x80200f <angle>
 47c:	70 93 10 20 	sts	0x2010, r23	; 0x802010 <angle+0x1>
	twi_wind_sendack();
 480:	0e 94 21 02 	call	0x442	; 0x442 <twi_wind_sendack>
	//twi_wind_send_byte(daten);
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__divsf3>:
 4a6:	0e 94 67 02 	call	0x4ce	; 0x4ce <__divsf3x>
 4aa:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_round>
 4ae:	0e 94 48 03 	call	0x690	; 0x690 <__fp_pscB>
 4b2:	58 f0       	brcs	.+22     	; 0x4ca <__divsf3+0x24>
 4b4:	0e 94 41 03 	call	0x682	; 0x682 <__fp_pscA>
 4b8:	40 f0       	brcs	.+16     	; 0x4ca <__divsf3+0x24>
 4ba:	29 f4       	brne	.+10     	; 0x4c6 <__divsf3+0x20>
 4bc:	5f 3f       	cpi	r21, 0xFF	; 255
 4be:	29 f0       	breq	.+10     	; 0x4ca <__divsf3+0x24>
 4c0:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_inf>
 4c4:	51 11       	cpse	r21, r1
 4c6:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_szero>
 4ca:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_nan>

000004ce <__divsf3x>:
 4ce:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_split3>
 4d2:	68 f3       	brcs	.-38     	; 0x4ae <__divsf3+0x8>

000004d4 <__divsf3_pse>:
 4d4:	99 23       	and	r25, r25
 4d6:	b1 f3       	breq	.-20     	; 0x4c4 <__divsf3+0x1e>
 4d8:	55 23       	and	r21, r21
 4da:	91 f3       	breq	.-28     	; 0x4c0 <__divsf3+0x1a>
 4dc:	95 1b       	sub	r25, r21
 4de:	55 0b       	sbc	r21, r21
 4e0:	bb 27       	eor	r27, r27
 4e2:	aa 27       	eor	r26, r26
 4e4:	62 17       	cp	r22, r18
 4e6:	73 07       	cpc	r23, r19
 4e8:	84 07       	cpc	r24, r20
 4ea:	38 f0       	brcs	.+14     	; 0x4fa <__divsf3_pse+0x26>
 4ec:	9f 5f       	subi	r25, 0xFF	; 255
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	44 1f       	adc	r20, r20
 4f6:	aa 1f       	adc	r26, r26
 4f8:	a9 f3       	breq	.-22     	; 0x4e4 <__divsf3_pse+0x10>
 4fa:	35 d0       	rcall	.+106    	; 0x566 <__divsf3_pse+0x92>
 4fc:	0e 2e       	mov	r0, r30
 4fe:	3a f0       	brmi	.+14     	; 0x50e <__divsf3_pse+0x3a>
 500:	e0 e8       	ldi	r30, 0x80	; 128
 502:	32 d0       	rcall	.+100    	; 0x568 <__divsf3_pse+0x94>
 504:	91 50       	subi	r25, 0x01	; 1
 506:	50 40       	sbci	r21, 0x00	; 0
 508:	e6 95       	lsr	r30
 50a:	00 1c       	adc	r0, r0
 50c:	ca f7       	brpl	.-14     	; 0x500 <__divsf3_pse+0x2c>
 50e:	2b d0       	rcall	.+86     	; 0x566 <__divsf3_pse+0x92>
 510:	fe 2f       	mov	r31, r30
 512:	29 d0       	rcall	.+82     	; 0x566 <__divsf3_pse+0x92>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	bb 1f       	adc	r27, r27
 51c:	26 17       	cp	r18, r22
 51e:	37 07       	cpc	r19, r23
 520:	48 07       	cpc	r20, r24
 522:	ab 07       	cpc	r26, r27
 524:	b0 e8       	ldi	r27, 0x80	; 128
 526:	09 f0       	breq	.+2      	; 0x52a <__divsf3_pse+0x56>
 528:	bb 0b       	sbc	r27, r27
 52a:	80 2d       	mov	r24, r0
 52c:	bf 01       	movw	r22, r30
 52e:	ff 27       	eor	r31, r31
 530:	93 58       	subi	r25, 0x83	; 131
 532:	5f 4f       	sbci	r21, 0xFF	; 255
 534:	3a f0       	brmi	.+14     	; 0x544 <__divsf3_pse+0x70>
 536:	9e 3f       	cpi	r25, 0xFE	; 254
 538:	51 05       	cpc	r21, r1
 53a:	78 f0       	brcs	.+30     	; 0x55a <__divsf3_pse+0x86>
 53c:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_inf>
 540:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_szero>
 544:	5f 3f       	cpi	r21, 0xFF	; 255
 546:	e4 f3       	brlt	.-8      	; 0x540 <__divsf3_pse+0x6c>
 548:	98 3e       	cpi	r25, 0xE8	; 232
 54a:	d4 f3       	brlt	.-12     	; 0x540 <__divsf3_pse+0x6c>
 54c:	86 95       	lsr	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b7 95       	ror	r27
 554:	f7 95       	ror	r31
 556:	9f 5f       	subi	r25, 0xFF	; 255
 558:	c9 f7       	brne	.-14     	; 0x54c <__divsf3_pse+0x78>
 55a:	88 0f       	add	r24, r24
 55c:	91 1d       	adc	r25, r1
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret
 566:	e1 e0       	ldi	r30, 0x01	; 1
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	bb 1f       	adc	r27, r27
 570:	62 17       	cp	r22, r18
 572:	73 07       	cpc	r23, r19
 574:	84 07       	cpc	r24, r20
 576:	ba 07       	cpc	r27, r26
 578:	20 f0       	brcs	.+8      	; 0x582 <__divsf3_pse+0xae>
 57a:	62 1b       	sub	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	ba 0b       	sbc	r27, r26
 582:	ee 1f       	adc	r30, r30
 584:	88 f7       	brcc	.-30     	; 0x568 <__divsf3_pse+0x94>
 586:	e0 95       	com	r30
 588:	08 95       	ret

0000058a <__fixsfsi>:
 58a:	0e 94 cc 02 	call	0x598	; 0x598 <__fixunssfsi>
 58e:	68 94       	set
 590:	b1 11       	cpse	r27, r1
 592:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_szero>
 596:	08 95       	ret

00000598 <__fixunssfsi>:
 598:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_splitA>
 59c:	88 f0       	brcs	.+34     	; 0x5c0 <__fixunssfsi+0x28>
 59e:	9f 57       	subi	r25, 0x7F	; 127
 5a0:	98 f0       	brcs	.+38     	; 0x5c8 <__fixunssfsi+0x30>
 5a2:	b9 2f       	mov	r27, r25
 5a4:	99 27       	eor	r25, r25
 5a6:	b7 51       	subi	r27, 0x17	; 23
 5a8:	b0 f0       	brcs	.+44     	; 0x5d6 <__fixunssfsi+0x3e>
 5aa:	e1 f0       	breq	.+56     	; 0x5e4 <__fixunssfsi+0x4c>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	1a f0       	brmi	.+6      	; 0x5bc <__fixunssfsi+0x24>
 5b6:	ba 95       	dec	r27
 5b8:	c9 f7       	brne	.-14     	; 0x5ac <__fixunssfsi+0x14>
 5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <__fixunssfsi+0x4c>
 5bc:	b1 30       	cpi	r27, 0x01	; 1
 5be:	91 f0       	breq	.+36     	; 0x5e4 <__fixunssfsi+0x4c>
 5c0:	0e 94 82 03 	call	0x704	; 0x704 <__fp_zero>
 5c4:	b1 e0       	ldi	r27, 0x01	; 1
 5c6:	08 95       	ret
 5c8:	0c 94 82 03 	jmp	0x704	; 0x704 <__fp_zero>
 5cc:	67 2f       	mov	r22, r23
 5ce:	78 2f       	mov	r23, r24
 5d0:	88 27       	eor	r24, r24
 5d2:	b8 5f       	subi	r27, 0xF8	; 248
 5d4:	39 f0       	breq	.+14     	; 0x5e4 <__fixunssfsi+0x4c>
 5d6:	b9 3f       	cpi	r27, 0xF9	; 249
 5d8:	cc f3       	brlt	.-14     	; 0x5cc <__fixunssfsi+0x34>
 5da:	86 95       	lsr	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b3 95       	inc	r27
 5e2:	d9 f7       	brne	.-10     	; 0x5da <__fixunssfsi+0x42>
 5e4:	3e f4       	brtc	.+14     	; 0x5f4 <__fixunssfsi+0x5c>
 5e6:	90 95       	com	r25
 5e8:	80 95       	com	r24
 5ea:	70 95       	com	r23
 5ec:	61 95       	neg	r22
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	8f 4f       	sbci	r24, 0xFF	; 255
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	08 95       	ret

000005f6 <__floatunsisf>:
 5f6:	e8 94       	clt
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <__floatsisf+0x12>

000005fa <__floatsisf>:
 5fa:	97 fb       	bst	r25, 7
 5fc:	3e f4       	brtc	.+14     	; 0x60c <__floatsisf+0x12>
 5fe:	90 95       	com	r25
 600:	80 95       	com	r24
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	99 23       	and	r25, r25
 60e:	a9 f0       	breq	.+42     	; 0x63a <__floatsisf+0x40>
 610:	f9 2f       	mov	r31, r25
 612:	96 e9       	ldi	r25, 0x96	; 150
 614:	bb 27       	eor	r27, r27
 616:	93 95       	inc	r25
 618:	f6 95       	lsr	r31
 61a:	87 95       	ror	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b7 95       	ror	r27
 622:	f1 11       	cpse	r31, r1
 624:	f8 cf       	rjmp	.-16     	; 0x616 <__floatsisf+0x1c>
 626:	fa f4       	brpl	.+62     	; 0x666 <__floatsisf+0x6c>
 628:	bb 0f       	add	r27, r27
 62a:	11 f4       	brne	.+4      	; 0x630 <__floatsisf+0x36>
 62c:	60 ff       	sbrs	r22, 0
 62e:	1b c0       	rjmp	.+54     	; 0x666 <__floatsisf+0x6c>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	16 c0       	rjmp	.+44     	; 0x666 <__floatsisf+0x6c>
 63a:	88 23       	and	r24, r24
 63c:	11 f0       	breq	.+4      	; 0x642 <__floatsisf+0x48>
 63e:	96 e9       	ldi	r25, 0x96	; 150
 640:	11 c0       	rjmp	.+34     	; 0x664 <__floatsisf+0x6a>
 642:	77 23       	and	r23, r23
 644:	21 f0       	breq	.+8      	; 0x64e <__floatsisf+0x54>
 646:	9e e8       	ldi	r25, 0x8E	; 142
 648:	87 2f       	mov	r24, r23
 64a:	76 2f       	mov	r23, r22
 64c:	05 c0       	rjmp	.+10     	; 0x658 <__floatsisf+0x5e>
 64e:	66 23       	and	r22, r22
 650:	71 f0       	breq	.+28     	; 0x66e <__floatsisf+0x74>
 652:	96 e8       	ldi	r25, 0x86	; 134
 654:	86 2f       	mov	r24, r22
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	2a f0       	brmi	.+10     	; 0x666 <__floatsisf+0x6c>
 65c:	9a 95       	dec	r25
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	da f7       	brpl	.-10     	; 0x65c <__floatsisf+0x62>
 666:	88 0f       	add	r24, r24
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__fp_inf>:
 670:	97 f9       	bld	r25, 7
 672:	9f 67       	ori	r25, 0x7F	; 127
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	08 95       	ret

0000067c <__fp_nan>:
 67c:	9f ef       	ldi	r25, 0xFF	; 255
 67e:	80 ec       	ldi	r24, 0xC0	; 192
 680:	08 95       	ret

00000682 <__fp_pscA>:
 682:	00 24       	eor	r0, r0
 684:	0a 94       	dec	r0
 686:	16 16       	cp	r1, r22
 688:	17 06       	cpc	r1, r23
 68a:	18 06       	cpc	r1, r24
 68c:	09 06       	cpc	r0, r25
 68e:	08 95       	ret

00000690 <__fp_pscB>:
 690:	00 24       	eor	r0, r0
 692:	0a 94       	dec	r0
 694:	12 16       	cp	r1, r18
 696:	13 06       	cpc	r1, r19
 698:	14 06       	cpc	r1, r20
 69a:	05 06       	cpc	r0, r21
 69c:	08 95       	ret

0000069e <__fp_round>:
 69e:	09 2e       	mov	r0, r25
 6a0:	03 94       	inc	r0
 6a2:	00 0c       	add	r0, r0
 6a4:	11 f4       	brne	.+4      	; 0x6aa <__fp_round+0xc>
 6a6:	88 23       	and	r24, r24
 6a8:	52 f0       	brmi	.+20     	; 0x6be <__fp_round+0x20>
 6aa:	bb 0f       	add	r27, r27
 6ac:	40 f4       	brcc	.+16     	; 0x6be <__fp_round+0x20>
 6ae:	bf 2b       	or	r27, r31
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__fp_round+0x18>
 6b2:	60 ff       	sbrs	r22, 0
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <__fp_round+0x20>
 6b6:	6f 5f       	subi	r22, 0xFF	; 255
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	08 95       	ret

000006c0 <__fp_split3>:
 6c0:	57 fd       	sbrc	r21, 7
 6c2:	90 58       	subi	r25, 0x80	; 128
 6c4:	44 0f       	add	r20, r20
 6c6:	55 1f       	adc	r21, r21
 6c8:	59 f0       	breq	.+22     	; 0x6e0 <__fp_splitA+0x10>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	71 f0       	breq	.+28     	; 0x6ea <__fp_splitA+0x1a>
 6ce:	47 95       	ror	r20

000006d0 <__fp_splitA>:
 6d0:	88 0f       	add	r24, r24
 6d2:	97 fb       	bst	r25, 7
 6d4:	99 1f       	adc	r25, r25
 6d6:	61 f0       	breq	.+24     	; 0x6f0 <__fp_splitA+0x20>
 6d8:	9f 3f       	cpi	r25, 0xFF	; 255
 6da:	79 f0       	breq	.+30     	; 0x6fa <__fp_splitA+0x2a>
 6dc:	87 95       	ror	r24
 6de:	08 95       	ret
 6e0:	12 16       	cp	r1, r18
 6e2:	13 06       	cpc	r1, r19
 6e4:	14 06       	cpc	r1, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	f2 cf       	rjmp	.-28     	; 0x6ce <__fp_split3+0xe>
 6ea:	46 95       	lsr	r20
 6ec:	f1 df       	rcall	.-30     	; 0x6d0 <__fp_splitA>
 6ee:	08 c0       	rjmp	.+16     	; 0x700 <__fp_splitA+0x30>
 6f0:	16 16       	cp	r1, r22
 6f2:	17 06       	cpc	r1, r23
 6f4:	18 06       	cpc	r1, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	f1 cf       	rjmp	.-30     	; 0x6dc <__fp_splitA+0xc>
 6fa:	86 95       	lsr	r24
 6fc:	71 05       	cpc	r23, r1
 6fe:	61 05       	cpc	r22, r1
 700:	08 94       	sec
 702:	08 95       	ret

00000704 <__fp_zero>:
 704:	e8 94       	clt

00000706 <__fp_szero>:
 706:	bb 27       	eor	r27, r27
 708:	66 27       	eor	r22, r22
 70a:	77 27       	eor	r23, r23
 70c:	cb 01       	movw	r24, r22
 70e:	97 f9       	bld	r25, 7
 710:	08 95       	ret

00000712 <__mulsf3>:
 712:	0e 94 9c 03 	call	0x738	; 0x738 <__mulsf3x>
 716:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_round>
 71a:	0e 94 41 03 	call	0x682	; 0x682 <__fp_pscA>
 71e:	38 f0       	brcs	.+14     	; 0x72e <__mulsf3+0x1c>
 720:	0e 94 48 03 	call	0x690	; 0x690 <__fp_pscB>
 724:	20 f0       	brcs	.+8      	; 0x72e <__mulsf3+0x1c>
 726:	95 23       	and	r25, r21
 728:	11 f0       	breq	.+4      	; 0x72e <__mulsf3+0x1c>
 72a:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_inf>
 72e:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_nan>
 732:	11 24       	eor	r1, r1
 734:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_szero>

00000738 <__mulsf3x>:
 738:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_split3>
 73c:	70 f3       	brcs	.-36     	; 0x71a <__mulsf3+0x8>

0000073e <__mulsf3_pse>:
 73e:	95 9f       	mul	r25, r21
 740:	c1 f3       	breq	.-16     	; 0x732 <__mulsf3+0x20>
 742:	95 0f       	add	r25, r21
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	55 1f       	adc	r21, r21
 748:	62 9f       	mul	r22, r18
 74a:	f0 01       	movw	r30, r0
 74c:	72 9f       	mul	r23, r18
 74e:	bb 27       	eor	r27, r27
 750:	f0 0d       	add	r31, r0
 752:	b1 1d       	adc	r27, r1
 754:	63 9f       	mul	r22, r19
 756:	aa 27       	eor	r26, r26
 758:	f0 0d       	add	r31, r0
 75a:	b1 1d       	adc	r27, r1
 75c:	aa 1f       	adc	r26, r26
 75e:	64 9f       	mul	r22, r20
 760:	66 27       	eor	r22, r22
 762:	b0 0d       	add	r27, r0
 764:	a1 1d       	adc	r26, r1
 766:	66 1f       	adc	r22, r22
 768:	82 9f       	mul	r24, r18
 76a:	22 27       	eor	r18, r18
 76c:	b0 0d       	add	r27, r0
 76e:	a1 1d       	adc	r26, r1
 770:	62 1f       	adc	r22, r18
 772:	73 9f       	mul	r23, r19
 774:	b0 0d       	add	r27, r0
 776:	a1 1d       	adc	r26, r1
 778:	62 1f       	adc	r22, r18
 77a:	83 9f       	mul	r24, r19
 77c:	a0 0d       	add	r26, r0
 77e:	61 1d       	adc	r22, r1
 780:	22 1f       	adc	r18, r18
 782:	74 9f       	mul	r23, r20
 784:	33 27       	eor	r19, r19
 786:	a0 0d       	add	r26, r0
 788:	61 1d       	adc	r22, r1
 78a:	23 1f       	adc	r18, r19
 78c:	84 9f       	mul	r24, r20
 78e:	60 0d       	add	r22, r0
 790:	21 1d       	adc	r18, r1
 792:	82 2f       	mov	r24, r18
 794:	76 2f       	mov	r23, r22
 796:	6a 2f       	mov	r22, r26
 798:	11 24       	eor	r1, r1
 79a:	9f 57       	subi	r25, 0x7F	; 127
 79c:	50 40       	sbci	r21, 0x00	; 0
 79e:	9a f0       	brmi	.+38     	; 0x7c6 <__mulsf3_pse+0x88>
 7a0:	f1 f0       	breq	.+60     	; 0x7de <__mulsf3_pse+0xa0>
 7a2:	88 23       	and	r24, r24
 7a4:	4a f0       	brmi	.+18     	; 0x7b8 <__mulsf3_pse+0x7a>
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	bb 1f       	adc	r27, r27
 7ac:	66 1f       	adc	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	91 50       	subi	r25, 0x01	; 1
 7b4:	50 40       	sbci	r21, 0x00	; 0
 7b6:	a9 f7       	brne	.-22     	; 0x7a2 <__mulsf3_pse+0x64>
 7b8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ba:	51 05       	cpc	r21, r1
 7bc:	80 f0       	brcs	.+32     	; 0x7de <__mulsf3_pse+0xa0>
 7be:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_inf>
 7c2:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_szero>
 7c6:	5f 3f       	cpi	r21, 0xFF	; 255
 7c8:	e4 f3       	brlt	.-8      	; 0x7c2 <__mulsf3_pse+0x84>
 7ca:	98 3e       	cpi	r25, 0xE8	; 232
 7cc:	d4 f3       	brlt	.-12     	; 0x7c2 <__mulsf3_pse+0x84>
 7ce:	86 95       	lsr	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b7 95       	ror	r27
 7d6:	f7 95       	ror	r31
 7d8:	e7 95       	ror	r30
 7da:	9f 5f       	subi	r25, 0xFF	; 255
 7dc:	c1 f7       	brne	.-16     	; 0x7ce <__mulsf3_pse+0x90>
 7de:	fe 2b       	or	r31, r30
 7e0:	88 0f       	add	r24, r24
 7e2:	91 1d       	adc	r25, r1
 7e4:	96 95       	lsr	r25
 7e6:	87 95       	ror	r24
 7e8:	97 f9       	bld	r25, 7
 7ea:	08 95       	ret

000007ec <__divmodhi4>:
 7ec:	97 fb       	bst	r25, 7
 7ee:	07 2e       	mov	r0, r23
 7f0:	16 f4       	brtc	.+4      	; 0x7f6 <__divmodhi4+0xa>
 7f2:	00 94       	com	r0
 7f4:	07 d0       	rcall	.+14     	; 0x804 <__divmodhi4_neg1>
 7f6:	77 fd       	sbrc	r23, 7
 7f8:	09 d0       	rcall	.+18     	; 0x80c <__divmodhi4_neg2>
 7fa:	0e 94 0a 04 	call	0x814	; 0x814 <__udivmodhi4>
 7fe:	07 fc       	sbrc	r0, 7
 800:	05 d0       	rcall	.+10     	; 0x80c <__divmodhi4_neg2>
 802:	3e f4       	brtc	.+14     	; 0x812 <__divmodhi4_exit>

00000804 <__divmodhi4_neg1>:
 804:	90 95       	com	r25
 806:	81 95       	neg	r24
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__divmodhi4_neg2>:
 80c:	70 95       	com	r23
 80e:	61 95       	neg	r22
 810:	7f 4f       	sbci	r23, 0xFF	; 255

00000812 <__divmodhi4_exit>:
 812:	08 95       	ret

00000814 <__udivmodhi4>:
 814:	aa 1b       	sub	r26, r26
 816:	bb 1b       	sub	r27, r27
 818:	51 e1       	ldi	r21, 0x11	; 17
 81a:	07 c0       	rjmp	.+14     	; 0x82a <__udivmodhi4_ep>

0000081c <__udivmodhi4_loop>:
 81c:	aa 1f       	adc	r26, r26
 81e:	bb 1f       	adc	r27, r27
 820:	a6 17       	cp	r26, r22
 822:	b7 07       	cpc	r27, r23
 824:	10 f0       	brcs	.+4      	; 0x82a <__udivmodhi4_ep>
 826:	a6 1b       	sub	r26, r22
 828:	b7 0b       	sbc	r27, r23

0000082a <__udivmodhi4_ep>:
 82a:	88 1f       	adc	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	5a 95       	dec	r21
 830:	a9 f7       	brne	.-22     	; 0x81c <__udivmodhi4_loop>
 832:	80 95       	com	r24
 834:	90 95       	com	r25
 836:	bc 01       	movw	r22, r24
 838:	cd 01       	movw	r24, r26
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
