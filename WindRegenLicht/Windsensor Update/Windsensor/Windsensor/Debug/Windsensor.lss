
Windsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  000009fc  00000a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00802008  00802008  00000a98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ce1  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c0c  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf6  00000000  00000000  000074e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000080dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025f8  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d6  00000000  00000000  0000a898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000b06e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b4:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_45>
  b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	ec ef       	ldi	r30, 0xFC	; 252
 210:	f9 e0       	ldi	r31, 0x09	; 9
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a8 30       	cpi	r26, 0x08	; 8
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a8 e0       	ldi	r26, 0x08	; 8
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	aa 32       	cpi	r26, 0x2A	; 42
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
 232:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_exit>

00000236 <__bad_interrupt>:
 236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <clock_init>:
#include "clock.h"

void clock_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;
 23a:	e0 e5       	ldi	r30, 0x50	; 80
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));	
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	81 ff       	sbrs	r24, 1
 248:	fd cf       	rjmp	.-6      	; 0x244 <clock_init+0xa>
	CCP = CCP_IOREG_gc;
 24a:	88 ed       	ldi	r24, 0xD8	; 216
 24c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 24e:	e0 e4       	ldi	r30, 0x40	; 64
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	90 83       	st	Z, r25
	CCP = CCP_IOREG_gc;
 256:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSADIV_8_gc;
 258:	84 e1       	ldi	r24, 0x14	; 20
 25a:	81 83       	std	Z+1, r24	; 0x01
 25c:	08 95       	ret

0000025e <main>:
#include "clock.h"


int main(void)
{
	clock_init();
 25e:	0e 94 1d 01 	call	0x23a	; 0x23a <clock_init>
	spi_wind_masterinit();
 262:	0e 94 3b 01 	call	0x276	; 0x276 <spi_wind_masterinit>

    while (1) 
    {
		spi_windspeed();
 266:	0e 94 b9 01 	call	0x372	; 0x372 <spi_windspeed>
 26a:	fd cf       	rjmp	.-6      	; 0x266 <main+0x8>

0000026c <twi_senddata>:
	while(!(SPIC.STATUS & SPI_IF_bm));
	datalow = SPIC.DATA;
	_delay_us(1);
	PORTC.OUTTGL = CHIPSELECT;
	return ((datahigh<<8) | datalow);
}
 26c:	e1 e1       	ldi	r30, 0x11	; 17
 26e:	f0 e2       	ldi	r31, 0x20	; 32
 270:	14 86       	std	Z+12, r1	; 0x0c
 272:	15 86       	std	Z+13, r1	; 0x0d
 274:	08 95       	ret

00000276 <spi_wind_masterinit>:
 276:	e0 e4       	ldi	r30, 0x40	; 64
 278:	f6 e0       	ldi	r31, 0x06	; 6
 27a:	80 eb       	ldi	r24, 0xB0	; 176
 27c:	81 83       	std	Z+1, r24	; 0x01
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	85 83       	std	Z+5, r24	; 0x05
 282:	e0 ec       	ldi	r30, 0xC0	; 192
 284:	f8 e0       	ldi	r31, 0x08	; 8
 286:	80 81       	ld	r24, Z
 288:	84 65       	ori	r24, 0x54	; 84
 28a:	80 83       	st	Z, r24
 28c:	e0 e8       	ldi	r30, 0x80	; 128
 28e:	f6 e0       	ldi	r31, 0x06	; 6
 290:	80 89       	ldd	r24, Z+16	; 0x10
 292:	88 61       	ori	r24, 0x18	; 24
 294:	80 8b       	std	Z+16, r24	; 0x10
 296:	81 89       	ldd	r24, Z+17	; 0x11
 298:	88 61       	ori	r24, 0x18	; 24
 29a:	81 8b       	std	Z+17, r24	; 0x11
 29c:	46 e3       	ldi	r20, 0x36	; 54
 29e:	51 e0       	ldi	r21, 0x01	; 1
 2a0:	60 ea       	ldi	r22, 0xA0	; 160
 2a2:	74 e0       	ldi	r23, 0x04	; 4
 2a4:	81 e1       	ldi	r24, 0x11	; 17
 2a6:	90 e2       	ldi	r25, 0x20	; 32
 2a8:	0e 94 40 02 	call	0x480	; 0x480 <TWI_SlaveInitializeDriver>
 2ac:	40 ec       	ldi	r20, 0xC0	; 192
 2ae:	62 ee       	ldi	r22, 0xE2	; 226
 2b0:	81 e1       	ldi	r24, 0x11	; 17
 2b2:	90 e2       	ldi	r25, 0x20	; 32
 2b4:	0e 94 4b 02 	call	0x496	; 0x496 <TWI_SlaveInitializeModule>
 2b8:	e0 ea       	ldi	r30, 0xA0	; 160
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	82 81       	ldd	r24, Z+2	; 0x02
 2be:	87 60       	ori	r24, 0x07	; 7
 2c0:	82 83       	std	Z+2, r24	; 0x02
 2c2:	78 94       	sei
 2c4:	08 95       	ret

000002c6 <spi_get_angle>:
	uint16_t anglehex = 0x00;
	float angledec = 0x00;
	uint8_t test;
	uint8_t datahigh = 0x13;
	uint8_t datalow = 0x37;
	PORTC.OUTTGL = CHIPSELECT;
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <spi_get_angle+0x8>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <spi_get_angle+0xe>
	_delay_us(1);
	test=SPIC.STATUS;
 2d4:	e0 ec       	ldi	r30, 0xC0	; 192
 2d6:	f8 e0       	ldi	r31, 0x08	; 8
 2d8:	82 81       	ldd	r24, Z+2	; 0x02
	SPIC.DATA=DUMMY;
 2da:	13 82       	std	Z+3, r1	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
 2dc:	82 81       	ldd	r24, Z+2	; 0x02
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <spi_get_angle+0x16>
	datahigh = SPIC.DATA;
 2e2:	e0 ec       	ldi	r30, 0xC0	; 192
 2e4:	f8 e0       	ldi	r31, 0x08	; 8
 2e6:	63 81       	ldd	r22, Z+3	; 0x03
	test=SPIC.STATUS;
 2e8:	82 81       	ldd	r24, Z+2	; 0x02
	SPIC.DATA=DUMMY;
 2ea:	13 82       	std	Z+3, r1	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
 2ec:	82 81       	ldd	r24, Z+2	; 0x02
 2ee:	88 23       	and	r24, r24
 2f0:	ec f7       	brge	.-6      	; 0x2ec <spi_get_angle+0x26>
	datalow = SPIC.DATA;
 2f2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	9a 95       	dec	r25
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <spi_get_angle+0x32>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <spi_get_angle+0x38>
	_delay_us(1);
	PORTC.OUTTGL = CHIPSELECT;
 2fe:	90 e1       	ldi	r25, 0x10	; 16
 300:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
	anglehex = ((datahigh<<2) | (datalow>>6));
	angledec = (((float)anglehex/(float)1024)*(float)360);
	return angledec;
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	82 95       	swap	r24
 310:	86 95       	lsr	r24
 312:	86 95       	lsr	r24
 314:	83 70       	andi	r24, 0x03	; 3
 316:	68 2b       	or	r22, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatunsisf>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e8       	ldi	r20, 0x80	; 128
 326:	5a e3       	ldi	r21, 0x3A	; 58
 328:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	44 eb       	ldi	r20, 0xB4	; 180
 332:	53 e4       	ldi	r21, 0x43	; 67
 334:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
}
 338:	08 95       	ret

0000033a <spi_angledif>:

int16_t differenz = -360;
int16_t spi_angledif(int16_t pre, int16_t cur)
{
	int16_t differenz = (cur-pre);
 33a:	68 1b       	sub	r22, r24
 33c:	79 0b       	sbc	r23, r25

	if (differenz>180)
 33e:	65 3b       	cpi	r22, 0xB5	; 181
 340:	71 05       	cpc	r23, r1
 342:	44 f0       	brlt	.+16     	; 0x354 <spi_angledif+0x1a>
	{
		differenz = (differenz - 360) % 360;
 344:	cb 01       	movw	r24, r22
 346:	88 56       	subi	r24, 0x68	; 104
 348:	91 40       	sbci	r25, 0x01	; 1
		return differenz;
 34a:	68 e6       	ldi	r22, 0x68	; 104
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divmodhi4>
 352:	08 95       	ret
	}
	else if (differenz<-180)
 354:	6c 34       	cpi	r22, 0x4C	; 76
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	78 07       	cpc	r23, r24
 35a:	44 f4       	brge	.+16     	; 0x36c <spi_angledif+0x32>
	{
		differenz = (differenz + 360) % 360;
 35c:	cb 01       	movw	r24, r22
 35e:	88 59       	subi	r24, 0x98	; 152
 360:	9e 4f       	sbci	r25, 0xFE	; 254
		return differenz;
 362:	68 e6       	ldi	r22, 0x68	; 104
 364:	71 e0       	ldi	r23, 0x01	; 1
 366:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divmodhi4>
 36a:	08 95       	ret
	}
	else
	{
		return differenz;
 36c:	86 2f       	mov	r24, r22
 36e:	97 2f       	mov	r25, r23
	}
}
 370:	08 95       	ret

00000372 <spi_windspeed>:
float timervalue = 0.01;
float radius = 0.022;
int16_t windgeschwindigkeit = 0;
int16_t spi_windspeed()
{
	prewinkel = spi_get_angle();
 372:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_get_angle>
 376:	0e 94 a3 03 	call	0x746	; 0x746 <__fixsfsi>
 37a:	60 93 0f 20 	sts	0x200F, r22	; 0x80200f <prewinkel>
 37e:	70 93 10 20 	sts	0x2010, r23	; 0x802010 <prewinkel+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 382:	8f e1       	ldi	r24, 0x1F	; 31
 384:	9e e4       	ldi	r25, 0x4E	; 78
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <spi_windspeed+0x14>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <spi_windspeed+0x1a>
 38c:	00 00       	nop
	_delay_ms(10);
	curwinkel = spi_get_angle();
 38e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_get_angle>
 392:	0e 94 a3 03 	call	0x746	; 0x746 <__fixsfsi>
 396:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <curwinkel>
 39a:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <curwinkel+0x1>
	winkeldifferenz = spi_angledif(prewinkel,curwinkel);
 39e:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <curwinkel>
 3a2:	70 91 0e 20 	lds	r23, 0x200E	; 0x80200e <curwinkel+0x1>
 3a6:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <prewinkel>
 3aa:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <prewinkel+0x1>
 3ae:	0e 94 9d 01 	call	0x33a	; 0x33a <spi_angledif>
 3b2:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <winkeldifferenz>
 3b6:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <winkeldifferenz+0x1>
	windgeschwindigkeit = ((winkeldifferenz)/(timervalue)*radius);				// Einheit und Wert passen nicht
	windgeschwindigkeit = (windgeschwindigkeit * -1)/3.6;
 3ba:	bc 01       	movw	r22, r24
 3bc:	99 0f       	add	r25, r25
 3be:	88 0b       	sbc	r24, r24
 3c0:	99 0b       	sbc	r25, r25
 3c2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__floatsisf>
 3c6:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <timervalue>
 3ca:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <timervalue+0x1>
 3ce:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <timervalue+0x2>
 3d2:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <timervalue+0x3>
 3d6:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3>
 3da:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 3de:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 3e2:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <__data_start+0x2>
 3e6:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <__data_start+0x3>
 3ea:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
 3ee:	0e 94 a3 03 	call	0x746	; 0x746 <__fixsfsi>
 3f2:	71 95       	neg	r23
 3f4:	61 95       	neg	r22
 3f6:	71 09       	sbc	r23, r1
 3f8:	07 2e       	mov	r0, r23
 3fa:	00 0c       	add	r0, r0
 3fc:	88 0b       	sbc	r24, r24
 3fe:	99 0b       	sbc	r25, r25
 400:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__floatsisf>
 404:	26 e6       	ldi	r18, 0x66	; 102
 406:	36 e6       	ldi	r19, 0x66	; 102
 408:	46 e6       	ldi	r20, 0x66	; 102
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3>
 410:	0e 94 a3 03 	call	0x746	; 0x746 <__fixsfsi>
 414:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <__data_end>
 418:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <__data_end+0x1>
	
	twiSlave.sendData[0] = test;
 41c:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <test>
 420:	e1 e1       	ldi	r30, 0x11	; 17
 422:	f0 e2       	ldi	r31, 0x20	; 32
 424:	24 87       	std	Z+12, r18	; 0x0c
	test = test + 0x01;
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	20 93 0c 20 	sts	0x200C, r18	; 0x80200c <test>
	twiSlave.sendData[1] = 0x34;
 42c:	24 e3       	ldi	r18, 0x34	; 52
 42e:	25 87       	std	Z+13, r18	; 0x0d
	
	//twiSlave.sendData[0] = (uint8_t)(windgeschwindigkeit>>8);
	//twiSlave.sendData[1] = (uint8_t)(windgeschwindigkeit);
	
	return windgeschwindigkeit;
}
 430:	cb 01       	movw	r24, r22
 432:	08 95       	ret

00000434 <__vector_45>:
	twiSlave.sendData[0] = 0x00;
	twiSlave.sendData[1] = 0x00;
}

ISR(TWIE_TWIS_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
 456:	81 e1       	ldi	r24, 0x11	; 17
 458:	90 e2       	ldi	r25, 0x20	; 32
 45a:	0e 94 02 03 	call	0x604	; 0x604 <TWI_SlaveInterruptHandler>
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <TWI_SlaveInitializeDriver>:
 *  \param processDataFunction  Pointer to the function that handles incoming data.
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
 480:	fc 01       	movw	r30, r24
	twi->interface = module;
 482:	60 83       	st	Z, r22
 484:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
 486:	42 83       	std	Z+2, r20	; 0x02
 488:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
 48a:	14 8a       	std	Z+20, r1	; 0x14
	twi->bytesSent = 0;
 48c:	15 8a       	std	Z+21, r1	; 0x15
	twi->status = TWIS_STATUS_READY;
 48e:	16 8a       	std	Z+22, r1	; 0x16
	twi->result = TWIS_RESULT_UNKNOWN;
 490:	17 8a       	std	Z+23, r1	; 0x17
	twi->abort = false;
 492:	10 8e       	std	Z+24, r1	; 0x18
 494:	08 95       	ret

00000496 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
 496:	dc 01       	movw	r26, r24
 498:	ed 91       	ld	r30, X+
 49a:	fc 91       	ld	r31, X
 49c:	11 97       	sbiw	r26, 0x01	; 1
 49e:	48 63       	ori	r20, 0x38	; 56
 4a0:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
 4a2:	ed 91       	ld	r30, X+
 4a4:	fc 91       	ld	r31, X
 4a6:	66 0f       	add	r22, r22
 4a8:	63 87       	std	Z+11, r22	; 0x0b
 4aa:	08 95       	ret

000004ac <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
 4ac:	fc 01       	movw	r30, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
 4ae:	80 8d       	ldd	r24, Z+24	; 0x18
 4b0:	88 23       	and	r24, r24
 4b2:	51 f0       	breq	.+20     	; 0x4c8 <TWI_SlaveAddressMatchHandler+0x1c>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
 4b4:	a0 81       	ld	r26, Z
 4b6:	b1 81       	ldd	r27, Z+1	; 0x01
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	19 96       	adiw	r26, 0x09	; 9
 4bc:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 4c2:	16 8a       	std	Z+22, r1	; 0x16
{
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
		twi->abort = false;
 4c4:	10 8e       	std	Z+24, r1	; 0x18
 4c6:	08 95       	ret
	} else {
		twi->status = TWIS_STATUS_BUSY;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	86 8b       	std	Z+22, r24	; 0x16
		twi->result = TWIS_RESULT_UNKNOWN;
 4cc:	17 8a       	std	Z+23, r1	; 0x17

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
 4ce:	a0 81       	ld	r26, Z
 4d0:	b1 81       	ldd	r27, Z+1	; 0x01
 4d2:	18 96       	adiw	r26, 0x08	; 8
 4d4:	8c 91       	ld	r24, X
 4d6:	18 97       	sbiw	r26, 0x08	; 8
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
 4d8:	8b 7f       	andi	r24, 0xFB	; 251
 4da:	18 96       	adiw	r26, 0x08	; 8
 4dc:	8c 93       	st	X, r24

		twi->bytesReceived = 0;
 4de:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
 4e0:	15 8a       	std	Z+21, r1	; 0x15

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
 4e2:	01 90       	ld	r0, Z+
 4e4:	f0 81       	ld	r31, Z
 4e6:	e0 2d       	mov	r30, r0
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	81 87       	std	Z+9, r24	; 0x09
 4ec:	08 95       	ret

000004ee <TWI_SlaveStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
 4ee:	fc 01       	movw	r30, r24
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
 4f0:	a0 81       	ld	r26, Z
 4f2:	b1 81       	ldd	r27, Z+1	; 0x01
 4f4:	18 96       	adiw	r26, 0x08	; 8
 4f6:	8c 91       	ld	r24, X
 4f8:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
 4fa:	8b 7f       	andi	r24, 0xFB	; 251
 4fc:	18 96       	adiw	r26, 0x08	; 8
 4fe:	8c 93       	st	X, r24
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
 500:	a0 81       	ld	r26, Z
 502:	b1 81       	ldd	r27, Z+1	; 0x01
 504:	1a 96       	adiw	r26, 0x0a	; 10
 506:	8c 91       	ld	r24, X
 508:	1a 97       	sbiw	r26, 0x0a	; 10
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	1a 96       	adiw	r26, 0x0a	; 10
 50e:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 514:	16 8a       	std	Z+22, r1	; 0x16
 516:	08 95       	ret

00000518 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	fc 01       	movw	r30, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
 51e:	a0 81       	ld	r26, Z
 520:	b1 81       	ldd	r27, Z+1	; 0x01
 522:	18 96       	adiw	r26, 0x08	; 8
 524:	8c 91       	ld	r24, X
 526:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
 528:	84 60       	ori	r24, 0x04	; 4
 52a:	18 96       	adiw	r26, 0x08	; 8
 52c:	8c 93       	st	X, r24

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
 52e:	84 89       	ldd	r24, Z+20	; 0x14
 530:	88 30       	cpi	r24, 0x08	; 8
 532:	08 f5       	brcc	.+66     	; 0x576 <TWI_SlaveReadHandler+0x5e>
 534:	ef 01       	movw	r28, r30
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
 536:	01 90       	ld	r0, Z+
 538:	f0 81       	ld	r31, Z
 53a:	e0 2d       	mov	r30, r0
 53c:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
 53e:	9c 89       	ldd	r25, Y+20	; 0x14
 540:	fe 01       	movw	r30, r28
 542:	e9 0f       	add	r30, r25
 544:	f1 1d       	adc	r31, r1
 546:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
 548:	ea 81       	ldd	r30, Y+2	; 0x02
 54a:	fb 81       	ldd	r31, Y+3	; 0x03
 54c:	09 95       	icall

		twi->bytesReceived++;
 54e:	8c 89       	ldd	r24, Y+20	; 0x14
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	8c 8b       	std	Y+20, r24	; 0x14

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
 554:	88 8d       	ldd	r24, Y+24	; 0x18
 556:	88 23       	and	r24, r24
 558:	49 f0       	breq	.+18     	; 0x56c <TWI_SlaveReadHandler+0x54>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
 55a:	e8 81       	ld	r30, Y
 55c:	f9 81       	ldd	r31, Y+1	; 0x01
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	81 87       	std	Z+9, r24	; 0x09
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	8f 8b       	std	Y+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 566:	1e 8a       	std	Y+22, r1	; 0x16
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
			twi->abort = false;
 568:	18 8e       	std	Y+24, r1	; 0x18
 56a:	0d c0       	rjmp	.+26     	; 0x586 <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
 56c:	e8 81       	ld	r30, Y
 56e:	f9 81       	ldd	r31, Y+1	; 0x01
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	81 87       	std	Z+9, r24	; 0x09
 574:	08 c0       	rjmp	.+16     	; 0x586 <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
 576:	a0 81       	ld	r26, Z
 578:	b1 81       	ldd	r27, Z+1	; 0x01
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	19 96       	adiw	r26, 0x09	; 9
 57e:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 584:	16 8a       	std	Z+22, r1	; 0x16
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
	}
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
 58c:	fc 01       	movw	r30, r24
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
 58e:	85 89       	ldd	r24, Z+21	; 0x15
 590:	88 23       	and	r24, r24
 592:	71 f0       	breq	.+28     	; 0x5b0 <TWI_SlaveWriteHandler+0x24>
 594:	a0 81       	ld	r26, Z
 596:	b1 81       	ldd	r27, Z+1	; 0x01
 598:	1a 96       	adiw	r26, 0x0a	; 10
 59a:	8c 91       	ld	r24, X
 59c:	1a 97       	sbiw	r26, 0x0a	; 10
 59e:	84 ff       	sbrs	r24, 4
 5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <TWI_SlaveWriteHandler+0x24>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	19 96       	adiw	r26, 0x09	; 9
 5a6:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 5ac:	16 8a       	std	Z+22, r1	; 0x16
 5ae:	08 95       	ret
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
 5b0:	85 89       	ldd	r24, Z+21	; 0x15
 5b2:	88 30       	cpi	r24, 0x08	; 8
 5b4:	98 f4       	brcc	.+38     	; 0x5dc <TWI_SlaveWriteHandler+0x50>
			uint8_t data = twi->sendData[twi->bytesSent];
 5b6:	85 89       	ldd	r24, Z+21	; 0x15
 5b8:	df 01       	movw	r26, r30
 5ba:	a8 0f       	add	r26, r24
 5bc:	b1 1d       	adc	r27, r1
 5be:	1c 96       	adiw	r26, 0x0c	; 12
 5c0:	8c 91       	ld	r24, X
			twi->interface->SLAVE.DATA = data;
 5c2:	a0 81       	ld	r26, Z
 5c4:	b1 81       	ldd	r27, Z+1	; 0x01
 5c6:	1c 96       	adiw	r26, 0x0c	; 12
 5c8:	8c 93       	st	X, r24
			twi->bytesSent++;
 5ca:	85 89       	ldd	r24, Z+21	; 0x15
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	85 8b       	std	Z+21, r24	; 0x15

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
 5d0:	01 90       	ld	r0, Z+
 5d2:	f0 81       	ld	r31, Z
 5d4:	e0 2d       	mov	r30, r0
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	81 87       	std	Z+9, r24	; 0x09
 5da:	08 95       	ret
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
 5dc:	a0 81       	ld	r26, Z
 5de:	b1 81       	ldd	r27, Z+1	; 0x01
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	19 96       	adiw	r26, 0x09	; 9
 5e4:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 5e6:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 5e8:	16 8a       	std	Z+22, r1	; 0x16
 5ea:	08 95       	ret

000005ec <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
 5ec:	dc 01       	movw	r26, r24
 5ee:	ed 91       	ld	r30, X+
 5f0:	fc 91       	ld	r31, X
 5f2:	22 85       	ldd	r18, Z+10	; 0x0a
 5f4:	21 ff       	sbrs	r18, 1
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <TWI_SlaveDataHandler+0x12>
		TWI_SlaveWriteHandler(twi);
 5f8:	0e 94 c6 02 	call	0x58c	; 0x58c <TWI_SlaveWriteHandler>
 5fc:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
 5fe:	0e 94 8c 02 	call	0x518	; 0x518 <TWI_SlaveReadHandler>
 602:	08 95       	ret

00000604 <TWI_SlaveInterruptHandler>:
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
 604:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
 606:	a0 81       	ld	r26, Z
 608:	b1 81       	ldd	r27, Z+1	; 0x01
 60a:	1a 96       	adiw	r26, 0x0a	; 10
 60c:	8c 91       	ld	r24, X

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
 60e:	82 ff       	sbrs	r24, 2
 610:	06 c0       	rjmp	.+12     	; 0x61e <TWI_SlaveInterruptHandler+0x1a>
		twi->bytesReceived = 0;
 612:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
 614:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_BUS_ERROR;
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
 61a:	16 8a       	std	Z+22, r1	; 0x16
 61c:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
 61e:	83 ff       	sbrs	r24, 3
 620:	06 c0       	rjmp	.+12     	; 0x62e <TWI_SlaveInterruptHandler+0x2a>
		twi->bytesReceived = 0;
 622:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
 624:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
 626:	83 e0       	ldi	r24, 0x03	; 3
 628:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
 62a:	16 8a       	std	Z+22, r1	; 0x16
 62c:	08 95       	ret
 62e:	28 2f       	mov	r18, r24
 630:	20 74       	andi	r18, 0x40	; 64
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
 632:	98 2f       	mov	r25, r24
 634:	91 74       	andi	r25, 0x41	; 65
 636:	91 34       	cpi	r25, 0x41	; 65
 638:	21 f4       	brne	.+8      	; 0x642 <TWI_SlaveInterruptHandler+0x3e>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
 63a:	cf 01       	movw	r24, r30
 63c:	0e 94 56 02 	call	0x4ac	; 0x4ac <TWI_SlaveAddressMatchHandler>
 640:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
 642:	22 23       	and	r18, r18
 644:	21 f0       	breq	.+8      	; 0x64e <TWI_SlaveInterruptHandler+0x4a>
		TWI_SlaveStopHandler(twi);
 646:	cf 01       	movw	r24, r30
 648:	0e 94 77 02 	call	0x4ee	; 0x4ee <TWI_SlaveStopHandler>
 64c:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
 64e:	88 23       	and	r24, r24
 650:	24 f4       	brge	.+8      	; 0x65a <TWI_SlaveInterruptHandler+0x56>
		TWI_SlaveDataHandler(twi);
 652:	cf 01       	movw	r24, r30
 654:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TWI_SlaveDataHandler>
 658:	08 95       	ret
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
 65a:	85 e0       	ldi	r24, 0x05	; 5
 65c:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
 65e:	16 8a       	std	Z+22, r1	; 0x16
 660:	08 95       	ret

00000662 <__divsf3>:
 662:	0e 94 45 03 	call	0x68a	; 0x68a <__divsf3x>
 666:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_round>
 66a:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscB>
 66e:	58 f0       	brcs	.+22     	; 0x686 <__divsf3+0x24>
 670:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscA>
 674:	40 f0       	brcs	.+16     	; 0x686 <__divsf3+0x24>
 676:	29 f4       	brne	.+10     	; 0x682 <__divsf3+0x20>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	29 f0       	breq	.+10     	; 0x686 <__divsf3+0x24>
 67c:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_inf>
 680:	51 11       	cpse	r21, r1
 682:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_szero>
 686:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_nan>

0000068a <__divsf3x>:
 68a:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_split3>
 68e:	68 f3       	brcs	.-38     	; 0x66a <__divsf3+0x8>

00000690 <__divsf3_pse>:
 690:	99 23       	and	r25, r25
 692:	b1 f3       	breq	.-20     	; 0x680 <__divsf3+0x1e>
 694:	55 23       	and	r21, r21
 696:	91 f3       	breq	.-28     	; 0x67c <__divsf3+0x1a>
 698:	95 1b       	sub	r25, r21
 69a:	55 0b       	sbc	r21, r21
 69c:	bb 27       	eor	r27, r27
 69e:	aa 27       	eor	r26, r26
 6a0:	62 17       	cp	r22, r18
 6a2:	73 07       	cpc	r23, r19
 6a4:	84 07       	cpc	r24, r20
 6a6:	38 f0       	brcs	.+14     	; 0x6b6 <__divsf3_pse+0x26>
 6a8:	9f 5f       	subi	r25, 0xFF	; 255
 6aa:	5f 4f       	sbci	r21, 0xFF	; 255
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	44 1f       	adc	r20, r20
 6b2:	aa 1f       	adc	r26, r26
 6b4:	a9 f3       	breq	.-22     	; 0x6a0 <__divsf3_pse+0x10>
 6b6:	35 d0       	rcall	.+106    	; 0x722 <__divsf3_pse+0x92>
 6b8:	0e 2e       	mov	r0, r30
 6ba:	3a f0       	brmi	.+14     	; 0x6ca <__divsf3_pse+0x3a>
 6bc:	e0 e8       	ldi	r30, 0x80	; 128
 6be:	32 d0       	rcall	.+100    	; 0x724 <__divsf3_pse+0x94>
 6c0:	91 50       	subi	r25, 0x01	; 1
 6c2:	50 40       	sbci	r21, 0x00	; 0
 6c4:	e6 95       	lsr	r30
 6c6:	00 1c       	adc	r0, r0
 6c8:	ca f7       	brpl	.-14     	; 0x6bc <__divsf3_pse+0x2c>
 6ca:	2b d0       	rcall	.+86     	; 0x722 <__divsf3_pse+0x92>
 6cc:	fe 2f       	mov	r31, r30
 6ce:	29 d0       	rcall	.+82     	; 0x722 <__divsf3_pse+0x92>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	bb 1f       	adc	r27, r27
 6d8:	26 17       	cp	r18, r22
 6da:	37 07       	cpc	r19, r23
 6dc:	48 07       	cpc	r20, r24
 6de:	ab 07       	cpc	r26, r27
 6e0:	b0 e8       	ldi	r27, 0x80	; 128
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <__divsf3_pse+0x56>
 6e4:	bb 0b       	sbc	r27, r27
 6e6:	80 2d       	mov	r24, r0
 6e8:	bf 01       	movw	r22, r30
 6ea:	ff 27       	eor	r31, r31
 6ec:	93 58       	subi	r25, 0x83	; 131
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	3a f0       	brmi	.+14     	; 0x700 <__divsf3_pse+0x70>
 6f2:	9e 3f       	cpi	r25, 0xFE	; 254
 6f4:	51 05       	cpc	r21, r1
 6f6:	78 f0       	brcs	.+30     	; 0x716 <__divsf3_pse+0x86>
 6f8:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_inf>
 6fc:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_szero>
 700:	5f 3f       	cpi	r21, 0xFF	; 255
 702:	e4 f3       	brlt	.-8      	; 0x6fc <__divsf3_pse+0x6c>
 704:	98 3e       	cpi	r25, 0xE8	; 232
 706:	d4 f3       	brlt	.-12     	; 0x6fc <__divsf3_pse+0x6c>
 708:	86 95       	lsr	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b7 95       	ror	r27
 710:	f7 95       	ror	r31
 712:	9f 5f       	subi	r25, 0xFF	; 255
 714:	c9 f7       	brne	.-14     	; 0x708 <__divsf3_pse+0x78>
 716:	88 0f       	add	r24, r24
 718:	91 1d       	adc	r25, r1
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret
 722:	e1 e0       	ldi	r30, 0x01	; 1
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	bb 1f       	adc	r27, r27
 72c:	62 17       	cp	r22, r18
 72e:	73 07       	cpc	r23, r19
 730:	84 07       	cpc	r24, r20
 732:	ba 07       	cpc	r27, r26
 734:	20 f0       	brcs	.+8      	; 0x73e <__divsf3_pse+0xae>
 736:	62 1b       	sub	r22, r18
 738:	73 0b       	sbc	r23, r19
 73a:	84 0b       	sbc	r24, r20
 73c:	ba 0b       	sbc	r27, r26
 73e:	ee 1f       	adc	r30, r30
 740:	88 f7       	brcc	.-30     	; 0x724 <__divsf3_pse+0x94>
 742:	e0 95       	com	r30
 744:	08 95       	ret

00000746 <__fixsfsi>:
 746:	0e 94 aa 03 	call	0x754	; 0x754 <__fixunssfsi>
 74a:	68 94       	set
 74c:	b1 11       	cpse	r27, r1
 74e:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_szero>
 752:	08 95       	ret

00000754 <__fixunssfsi>:
 754:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_splitA>
 758:	88 f0       	brcs	.+34     	; 0x77c <__fixunssfsi+0x28>
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	98 f0       	brcs	.+38     	; 0x784 <__fixunssfsi+0x30>
 75e:	b9 2f       	mov	r27, r25
 760:	99 27       	eor	r25, r25
 762:	b7 51       	subi	r27, 0x17	; 23
 764:	b0 f0       	brcs	.+44     	; 0x792 <__fixunssfsi+0x3e>
 766:	e1 f0       	breq	.+56     	; 0x7a0 <__fixunssfsi+0x4c>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	1a f0       	brmi	.+6      	; 0x778 <__fixunssfsi+0x24>
 772:	ba 95       	dec	r27
 774:	c9 f7       	brne	.-14     	; 0x768 <__fixunssfsi+0x14>
 776:	14 c0       	rjmp	.+40     	; 0x7a0 <__fixunssfsi+0x4c>
 778:	b1 30       	cpi	r27, 0x01	; 1
 77a:	91 f0       	breq	.+36     	; 0x7a0 <__fixunssfsi+0x4c>
 77c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_zero>
 780:	b1 e0       	ldi	r27, 0x01	; 1
 782:	08 95       	ret
 784:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__fp_zero>
 788:	67 2f       	mov	r22, r23
 78a:	78 2f       	mov	r23, r24
 78c:	88 27       	eor	r24, r24
 78e:	b8 5f       	subi	r27, 0xF8	; 248
 790:	39 f0       	breq	.+14     	; 0x7a0 <__fixunssfsi+0x4c>
 792:	b9 3f       	cpi	r27, 0xF9	; 249
 794:	cc f3       	brlt	.-14     	; 0x788 <__fixunssfsi+0x34>
 796:	86 95       	lsr	r24
 798:	77 95       	ror	r23
 79a:	67 95       	ror	r22
 79c:	b3 95       	inc	r27
 79e:	d9 f7       	brne	.-10     	; 0x796 <__fixunssfsi+0x42>
 7a0:	3e f4       	brtc	.+14     	; 0x7b0 <__fixunssfsi+0x5c>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	08 95       	ret

000007b2 <__floatunsisf>:
 7b2:	e8 94       	clt
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <__floatsisf+0x12>

000007b6 <__floatsisf>:
 7b6:	97 fb       	bst	r25, 7
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__floatsisf+0x12>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	99 23       	and	r25, r25
 7ca:	a9 f0       	breq	.+42     	; 0x7f6 <__floatsisf+0x40>
 7cc:	f9 2f       	mov	r31, r25
 7ce:	96 e9       	ldi	r25, 0x96	; 150
 7d0:	bb 27       	eor	r27, r27
 7d2:	93 95       	inc	r25
 7d4:	f6 95       	lsr	r31
 7d6:	87 95       	ror	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f1 11       	cpse	r31, r1
 7e0:	f8 cf       	rjmp	.-16     	; 0x7d2 <__floatsisf+0x1c>
 7e2:	fa f4       	brpl	.+62     	; 0x822 <__floatsisf+0x6c>
 7e4:	bb 0f       	add	r27, r27
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__floatsisf+0x36>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	1b c0       	rjmp	.+54     	; 0x822 <__floatsisf+0x6c>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	16 c0       	rjmp	.+44     	; 0x822 <__floatsisf+0x6c>
 7f6:	88 23       	and	r24, r24
 7f8:	11 f0       	breq	.+4      	; 0x7fe <__floatsisf+0x48>
 7fa:	96 e9       	ldi	r25, 0x96	; 150
 7fc:	11 c0       	rjmp	.+34     	; 0x820 <__floatsisf+0x6a>
 7fe:	77 23       	and	r23, r23
 800:	21 f0       	breq	.+8      	; 0x80a <__floatsisf+0x54>
 802:	9e e8       	ldi	r25, 0x8E	; 142
 804:	87 2f       	mov	r24, r23
 806:	76 2f       	mov	r23, r22
 808:	05 c0       	rjmp	.+10     	; 0x814 <__floatsisf+0x5e>
 80a:	66 23       	and	r22, r22
 80c:	71 f0       	breq	.+28     	; 0x82a <__floatsisf+0x74>
 80e:	96 e8       	ldi	r25, 0x86	; 134
 810:	86 2f       	mov	r24, r22
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	2a f0       	brmi	.+10     	; 0x822 <__floatsisf+0x6c>
 818:	9a 95       	dec	r25
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	da f7       	brpl	.-10     	; 0x818 <__floatsisf+0x62>
 822:	88 0f       	add	r24, r24
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__fp_inf>:
 82c:	97 f9       	bld	r25, 7
 82e:	9f 67       	ori	r25, 0x7F	; 127
 830:	80 e8       	ldi	r24, 0x80	; 128
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	08 95       	ret

00000838 <__fp_nan>:
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	80 ec       	ldi	r24, 0xC0	; 192
 83c:	08 95       	ret

0000083e <__fp_pscA>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	09 06       	cpc	r0, r25
 84a:	08 95       	ret

0000084c <__fp_pscB>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	05 06       	cpc	r0, r21
 858:	08 95       	ret

0000085a <__fp_round>:
 85a:	09 2e       	mov	r0, r25
 85c:	03 94       	inc	r0
 85e:	00 0c       	add	r0, r0
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0xc>
 862:	88 23       	and	r24, r24
 864:	52 f0       	brmi	.+20     	; 0x87a <__fp_round+0x20>
 866:	bb 0f       	add	r27, r27
 868:	40 f4       	brcc	.+16     	; 0x87a <__fp_round+0x20>
 86a:	bf 2b       	or	r27, r31
 86c:	11 f4       	brne	.+4      	; 0x872 <__fp_round+0x18>
 86e:	60 ff       	sbrs	r22, 0
 870:	04 c0       	rjmp	.+8      	; 0x87a <__fp_round+0x20>
 872:	6f 5f       	subi	r22, 0xFF	; 255
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__fp_split3>:
 87c:	57 fd       	sbrc	r21, 7
 87e:	90 58       	subi	r25, 0x80	; 128
 880:	44 0f       	add	r20, r20
 882:	55 1f       	adc	r21, r21
 884:	59 f0       	breq	.+22     	; 0x89c <__fp_splitA+0x10>
 886:	5f 3f       	cpi	r21, 0xFF	; 255
 888:	71 f0       	breq	.+28     	; 0x8a6 <__fp_splitA+0x1a>
 88a:	47 95       	ror	r20

0000088c <__fp_splitA>:
 88c:	88 0f       	add	r24, r24
 88e:	97 fb       	bst	r25, 7
 890:	99 1f       	adc	r25, r25
 892:	61 f0       	breq	.+24     	; 0x8ac <__fp_splitA+0x20>
 894:	9f 3f       	cpi	r25, 0xFF	; 255
 896:	79 f0       	breq	.+30     	; 0x8b6 <__fp_splitA+0x2a>
 898:	87 95       	ror	r24
 89a:	08 95       	ret
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	55 1f       	adc	r21, r21
 8a4:	f2 cf       	rjmp	.-28     	; 0x88a <__fp_split3+0xe>
 8a6:	46 95       	lsr	r20
 8a8:	f1 df       	rcall	.-30     	; 0x88c <__fp_splitA>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__fp_splitA+0x30>
 8ac:	16 16       	cp	r1, r22
 8ae:	17 06       	cpc	r1, r23
 8b0:	18 06       	cpc	r1, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	f1 cf       	rjmp	.-30     	; 0x898 <__fp_splitA+0xc>
 8b6:	86 95       	lsr	r24
 8b8:	71 05       	cpc	r23, r1
 8ba:	61 05       	cpc	r22, r1
 8bc:	08 94       	sec
 8be:	08 95       	ret

000008c0 <__fp_zero>:
 8c0:	e8 94       	clt

000008c2 <__fp_szero>:
 8c2:	bb 27       	eor	r27, r27
 8c4:	66 27       	eor	r22, r22
 8c6:	77 27       	eor	r23, r23
 8c8:	cb 01       	movw	r24, r22
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <__mulsf3>:
 8ce:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3x>
 8d2:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_round>
 8d6:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscA>
 8da:	38 f0       	brcs	.+14     	; 0x8ea <__mulsf3+0x1c>
 8dc:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscB>
 8e0:	20 f0       	brcs	.+8      	; 0x8ea <__mulsf3+0x1c>
 8e2:	95 23       	and	r25, r21
 8e4:	11 f0       	breq	.+4      	; 0x8ea <__mulsf3+0x1c>
 8e6:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_inf>
 8ea:	0c 94 1c 04 	jmp	0x838	; 0x838 <__fp_nan>
 8ee:	11 24       	eor	r1, r1
 8f0:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_szero>

000008f4 <__mulsf3x>:
 8f4:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_split3>
 8f8:	70 f3       	brcs	.-36     	; 0x8d6 <__mulsf3+0x8>

000008fa <__mulsf3_pse>:
 8fa:	95 9f       	mul	r25, r21
 8fc:	c1 f3       	breq	.-16     	; 0x8ee <__mulsf3+0x20>
 8fe:	95 0f       	add	r25, r21
 900:	50 e0       	ldi	r21, 0x00	; 0
 902:	55 1f       	adc	r21, r21
 904:	62 9f       	mul	r22, r18
 906:	f0 01       	movw	r30, r0
 908:	72 9f       	mul	r23, r18
 90a:	bb 27       	eor	r27, r27
 90c:	f0 0d       	add	r31, r0
 90e:	b1 1d       	adc	r27, r1
 910:	63 9f       	mul	r22, r19
 912:	aa 27       	eor	r26, r26
 914:	f0 0d       	add	r31, r0
 916:	b1 1d       	adc	r27, r1
 918:	aa 1f       	adc	r26, r26
 91a:	64 9f       	mul	r22, r20
 91c:	66 27       	eor	r22, r22
 91e:	b0 0d       	add	r27, r0
 920:	a1 1d       	adc	r26, r1
 922:	66 1f       	adc	r22, r22
 924:	82 9f       	mul	r24, r18
 926:	22 27       	eor	r18, r18
 928:	b0 0d       	add	r27, r0
 92a:	a1 1d       	adc	r26, r1
 92c:	62 1f       	adc	r22, r18
 92e:	73 9f       	mul	r23, r19
 930:	b0 0d       	add	r27, r0
 932:	a1 1d       	adc	r26, r1
 934:	62 1f       	adc	r22, r18
 936:	83 9f       	mul	r24, r19
 938:	a0 0d       	add	r26, r0
 93a:	61 1d       	adc	r22, r1
 93c:	22 1f       	adc	r18, r18
 93e:	74 9f       	mul	r23, r20
 940:	33 27       	eor	r19, r19
 942:	a0 0d       	add	r26, r0
 944:	61 1d       	adc	r22, r1
 946:	23 1f       	adc	r18, r19
 948:	84 9f       	mul	r24, r20
 94a:	60 0d       	add	r22, r0
 94c:	21 1d       	adc	r18, r1
 94e:	82 2f       	mov	r24, r18
 950:	76 2f       	mov	r23, r22
 952:	6a 2f       	mov	r22, r26
 954:	11 24       	eor	r1, r1
 956:	9f 57       	subi	r25, 0x7F	; 127
 958:	50 40       	sbci	r21, 0x00	; 0
 95a:	9a f0       	brmi	.+38     	; 0x982 <__mulsf3_pse+0x88>
 95c:	f1 f0       	breq	.+60     	; 0x99a <__mulsf3_pse+0xa0>
 95e:	88 23       	and	r24, r24
 960:	4a f0       	brmi	.+18     	; 0x974 <__mulsf3_pse+0x7a>
 962:	ee 0f       	add	r30, r30
 964:	ff 1f       	adc	r31, r31
 966:	bb 1f       	adc	r27, r27
 968:	66 1f       	adc	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	91 50       	subi	r25, 0x01	; 1
 970:	50 40       	sbci	r21, 0x00	; 0
 972:	a9 f7       	brne	.-22     	; 0x95e <__mulsf3_pse+0x64>
 974:	9e 3f       	cpi	r25, 0xFE	; 254
 976:	51 05       	cpc	r21, r1
 978:	80 f0       	brcs	.+32     	; 0x99a <__mulsf3_pse+0xa0>
 97a:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_inf>
 97e:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_szero>
 982:	5f 3f       	cpi	r21, 0xFF	; 255
 984:	e4 f3       	brlt	.-8      	; 0x97e <__mulsf3_pse+0x84>
 986:	98 3e       	cpi	r25, 0xE8	; 232
 988:	d4 f3       	brlt	.-12     	; 0x97e <__mulsf3_pse+0x84>
 98a:	86 95       	lsr	r24
 98c:	77 95       	ror	r23
 98e:	67 95       	ror	r22
 990:	b7 95       	ror	r27
 992:	f7 95       	ror	r31
 994:	e7 95       	ror	r30
 996:	9f 5f       	subi	r25, 0xFF	; 255
 998:	c1 f7       	brne	.-16     	; 0x98a <__mulsf3_pse+0x90>
 99a:	fe 2b       	or	r31, r30
 99c:	88 0f       	add	r24, r24
 99e:	91 1d       	adc	r25, r1
 9a0:	96 95       	lsr	r25
 9a2:	87 95       	ror	r24
 9a4:	97 f9       	bld	r25, 7
 9a6:	08 95       	ret

000009a8 <__divmodhi4>:
 9a8:	97 fb       	bst	r25, 7
 9aa:	07 2e       	mov	r0, r23
 9ac:	16 f4       	brtc	.+4      	; 0x9b2 <__divmodhi4+0xa>
 9ae:	00 94       	com	r0
 9b0:	07 d0       	rcall	.+14     	; 0x9c0 <__divmodhi4_neg1>
 9b2:	77 fd       	sbrc	r23, 7
 9b4:	09 d0       	rcall	.+18     	; 0x9c8 <__divmodhi4_neg2>
 9b6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__udivmodhi4>
 9ba:	07 fc       	sbrc	r0, 7
 9bc:	05 d0       	rcall	.+10     	; 0x9c8 <__divmodhi4_neg2>
 9be:	3e f4       	brtc	.+14     	; 0x9ce <__divmodhi4_exit>

000009c0 <__divmodhi4_neg1>:
 9c0:	90 95       	com	r25
 9c2:	81 95       	neg	r24
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	08 95       	ret

000009c8 <__divmodhi4_neg2>:
 9c8:	70 95       	com	r23
 9ca:	61 95       	neg	r22
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255

000009ce <__divmodhi4_exit>:
 9ce:	08 95       	ret

000009d0 <__udivmodhi4>:
 9d0:	aa 1b       	sub	r26, r26
 9d2:	bb 1b       	sub	r27, r27
 9d4:	51 e1       	ldi	r21, 0x11	; 17
 9d6:	07 c0       	rjmp	.+14     	; 0x9e6 <__udivmodhi4_ep>

000009d8 <__udivmodhi4_loop>:
 9d8:	aa 1f       	adc	r26, r26
 9da:	bb 1f       	adc	r27, r27
 9dc:	a6 17       	cp	r26, r22
 9de:	b7 07       	cpc	r27, r23
 9e0:	10 f0       	brcs	.+4      	; 0x9e6 <__udivmodhi4_ep>
 9e2:	a6 1b       	sub	r26, r22
 9e4:	b7 0b       	sbc	r27, r23

000009e6 <__udivmodhi4_ep>:
 9e6:	88 1f       	adc	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	5a 95       	dec	r21
 9ec:	a9 f7       	brne	.-22     	; 0x9d8 <__udivmodhi4_loop>
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	bc 01       	movw	r22, r24
 9f4:	cd 01       	movw	r24, r26
 9f6:	08 95       	ret

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
