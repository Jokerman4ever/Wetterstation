
i2c_eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000778  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000007cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c23  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000349f  00000000  00000000  000044df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000092d  00000000  00000000  0000797e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  000082ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002950  00000000  00000000  00008414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028d  00000000  00000000  0000ad64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000aff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	0e 94 16 02 	call	0x42c	; 0x42c <main>
 210:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <send_start_and_address>:

static uint8_t recieve()
{
	TWI_WAIT_RW_COMPLETE();
	return TWIC.MASTER.DATA;
}
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	6a 83       	std	Y+2, r22	; 0x02
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	88 0f       	add	r24, r24
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	94 e0       	ldi	r25, 0x04	; 4
 232:	2a 81       	ldd	r18, Y+2	; 0x02
 234:	22 23       	and	r18, r18
 236:	11 f0       	breq	.+4      	; 0x23c <send_start_and_address+0x24>
 238:	29 81       	ldd	r18, Y+1	; 0x01
 23a:	02 c0       	rjmp	.+4      	; 0x240 <send_start_and_address+0x28>
 23c:	29 81       	ldd	r18, Y+1	; 0x01
 23e:	21 60       	ori	r18, 0x01	; 1
 240:	fc 01       	movw	r30, r24
 242:	26 83       	std	Z+6, r18	; 0x06
 244:	00 00       	nop
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	fc 01       	movw	r30, r24
 24c:	84 81       	ldd	r24, Z+4	; 0x04
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	80 74       	andi	r24, 0x40	; 64
 254:	99 27       	eor	r25, r25
 256:	89 2b       	or	r24, r25
 258:	31 f4       	brne	.+12     	; 0x266 <send_start_and_address+0x4e>
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	fc 01       	movw	r30, r24
 260:	84 81       	ldd	r24, Z+4	; 0x04
 262:	88 23       	and	r24, r24
 264:	84 f7       	brge	.-32     	; 0x246 <send_start_and_address+0x2e>
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	fc 01       	movw	r30, r24
 26c:	84 81       	ldd	r24, Z+4	; 0x04
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	80 71       	andi	r24, 0x10	; 16
 274:	99 27       	eor	r25, r25
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	89 2b       	or	r24, r25
 27a:	09 f0       	breq	.+2      	; 0x27e <send_start_and_address+0x66>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	82 2f       	mov	r24, r18
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <send_stop_condition>:
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	94 e0       	ldi	r25, 0x04	; 4
 296:	23 e0       	ldi	r18, 0x03	; 3
 298:	fc 01       	movw	r30, r24
 29a:	23 83       	std	Z+3, r18	; 0x03
 29c:	00 00       	nop
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <send_nack_and_stop_condition>:
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	94 e0       	ldi	r25, 0x04	; 4
 2b0:	27 e0       	ldi	r18, 0x07	; 7
 2b2:	fc 01       	movw	r30, r24
 2b4:	23 83       	std	Z+3, r18	; 0x03
 2b6:	00 00       	nop
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <ack_and_received>:
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	94 e0       	ldi	r25, 0x04	; 4
 2ca:	22 e0       	ldi	r18, 0x02	; 2
 2cc:	fc 01       	movw	r30, r24
 2ce:	23 83       	std	Z+3, r18	; 0x03
 2d0:	00 00       	nop
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <receive_byte>:
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	1f 92       	push	r1
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	89 83       	std	Y+1, r24	; 0x01
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	00 00       	nop
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	94 e0       	ldi	r25, 0x04	; 4
 2ee:	fc 01       	movw	r30, r24
 2f0:	84 81       	ldd	r24, Z+4	; 0x04
 2f2:	88 2f       	mov	r24, r24
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	80 74       	andi	r24, 0x40	; 64
 2f8:	99 27       	eor	r25, r25
 2fa:	89 2b       	or	r24, r25
 2fc:	31 f4       	brne	.+12     	; 0x30a <receive_byte+0x32>
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	94 e0       	ldi	r25, 0x04	; 4
 302:	fc 01       	movw	r30, r24
 304:	84 81       	ldd	r24, Z+4	; 0x04
 306:	88 23       	and	r24, r24
 308:	84 f7       	brge	.-32     	; 0x2ea <receive_byte+0x12>
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	94 e0       	ldi	r25, 0x04	; 4
 30e:	fc 01       	movw	r30, r24
 310:	27 81       	ldd	r18, Z+7	; 0x07
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	94 e0       	ldi	r25, 0x04	; 4
 31e:	fc 01       	movw	r30, r24
 320:	84 81       	ldd	r24, Z+4	; 0x04
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	84 70       	andi	r24, 0x04	; 4
 328:	99 27       	eor	r25, r25
 32a:	89 2b       	or	r24, r25
 32c:	51 f0       	breq	.+20     	; 0x342 <receive_byte+0x6a>
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	fc 01       	movw	r30, r24
 334:	84 81       	ldd	r24, Z+4	; 0x04
 336:	88 2f       	mov	r24, r24
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	80 74       	andi	r24, 0x40	; 64
 33c:	99 27       	eor	r25, r25
 33e:	89 2b       	or	r24, r25
 340:	19 f4       	brne	.+6      	; 0x348 <receive_byte+0x70>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <receive_byte+0x74>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	81 70       	andi	r24, 0x01	; 1
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <i2c_eeprom_init>:

void i2c_eeprom_init()
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
	// Raise pullups
	PORTC.PIN0CTRL = (PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;
 360:	80 e4       	ldi	r24, 0x40	; 64
 362:	96 e0       	ldi	r25, 0x06	; 6
 364:	20 e4       	ldi	r18, 0x40	; 64
 366:	36 e0       	ldi	r19, 0x06	; 6
 368:	f9 01       	movw	r30, r18
 36a:	20 89       	ldd	r18, Z+16	; 0x10
 36c:	27 7c       	andi	r18, 0xC7	; 199
 36e:	28 61       	ori	r18, 0x18	; 24
 370:	fc 01       	movw	r30, r24
 372:	20 8b       	std	Z+16, r18	; 0x10
	PORTC.PIN1CTRL = (PORTC.PIN1CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;
 374:	80 e4       	ldi	r24, 0x40	; 64
 376:	96 e0       	ldi	r25, 0x06	; 6
 378:	20 e4       	ldi	r18, 0x40	; 64
 37a:	36 e0       	ldi	r19, 0x06	; 6
 37c:	f9 01       	movw	r30, r18
 37e:	21 89       	ldd	r18, Z+17	; 0x11
 380:	27 7c       	andi	r18, 0xC7	; 199
 382:	28 61       	ori	r18, 0x18	; 24
 384:	fc 01       	movw	r30, r24
 386:	21 8b       	std	Z+17, r18	; 0x11
	
	TWIC.MASTER.BAUD = TWI_BAUDSETTING;
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	25 e0       	ldi	r18, 0x05	; 5
 38e:	fc 01       	movw	r30, r24
 390:	25 83       	std	Z+5, r18	; 0x05
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
 392:	80 e8       	ldi	r24, 0x80	; 128
 394:	94 e0       	ldi	r25, 0x04	; 4
 396:	28 e0       	ldi	r18, 0x08	; 8
 398:	fc 01       	movw	r30, r24
 39a:	21 83       	std	Z+1, r18	; 0x01
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	94 e0       	ldi	r25, 0x04	; 4
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	fc 01       	movw	r30, r24
 3a4:	24 83       	std	Z+4, r18	; 0x04
}
 3a6:	00 00       	nop
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <i2c_wind_read>:

void i2c_wind_read(uint8_t i2c_addr, uint8_t* buffer, size_t len)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	27 97       	sbiw	r28, 0x07	; 7
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	8b 83       	std	Y+3, r24	; 0x03
 3be:	6c 83       	std	Y+4, r22	; 0x04
 3c0:	7d 83       	std	Y+5, r23	; 0x05
 3c2:	4e 83       	std	Y+6, r20	; 0x06
 3c4:	5f 83       	std	Y+7, r21	; 0x07
	size_t num = 0;
 3c6:	19 82       	std	Y+1, r1	; 0x01
 3c8:	1a 82       	std	Y+2, r1	; 0x02
	if (!send_start_and_address(i2c_addr,false))
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	0e 94 0c 01 	call	0x218	; 0x218 <send_start_and_address>
 3d2:	98 2f       	mov	r25, r24
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	89 27       	eor	r24, r25
 3d8:	88 23       	and	r24, r24
 3da:	b9 f0       	breq	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		send_stop_condition();
 3dc:	0e 94 45 01 	call	0x28a	; 0x28a <send_stop_condition>
		return false;
 3e0:	1f c0       	rjmp	.+62     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	
	while (num < len)
	{
		if (!receive_byte(&buffer[num]))
 3e2:	2c 81       	ldd	r18, Y+4	; 0x04
 3e4:	3d 81       	ldd	r19, Y+5	; 0x05
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <receive_byte>
 3f2:	98 2f       	mov	r25, r24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	89 27       	eor	r24, r25
 3f8:	88 23       	and	r24, r24
 3fa:	79 f4       	brne	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			break;
		}
		ack_and_received();
 3fc:	0e 94 5f 01 	call	0x2be	; 0x2be <ack_and_received>
		num++;
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	9a 81       	ldd	r25, Y+2	; 0x02
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	9a 83       	std	Y+2, r25	; 0x02
	{
		send_stop_condition();
		return false;
	}
	
	while (num < len)
 40a:	29 81       	ldd	r18, Y+1	; 0x01
 40c:	3a 81       	ldd	r19, Y+2	; 0x02
 40e:	8e 81       	ldd	r24, Y+6	; 0x06
 410:	9f 81       	ldd	r25, Y+7	; 0x07
 412:	28 17       	cp	r18, r24
 414:	39 07       	cpc	r19, r25
 416:	28 f3       	brcs	.-54     	; 0x3e2 <i2c_wind_read+0x34>
 418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		if (!receive_byte(&buffer[num]))
		{
			break;
 41a:	00 00       	nop
		}
		ack_and_received();
		num++;
	}
	send_nack_and_stop_condition();
 41c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <send_nack_and_stop_condition>
}
 420:	27 96       	adiw	r28, 0x07	; 7
 422:	cd bf       	out	0x3d, r28	; 61
 424:	de bf       	out	0x3e, r29	; 62
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <main>:
#include "spi_eeprom.h"

#define SLAVEADDR 0xE2

int main(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	61 97       	sbiw	r28, 0x11	; 17
 436:	cd bf       	out	0x3d, r28	; 61
 438:	de bf       	out	0x3e, r29	; 62
	i2c_eeprom_init();
 43a:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_eeprom_init>
	
	uint8_t rueckgabe[2] = {0xFF, 0xFF};
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	88 8b       	std	Y+16, r24	; 0x10
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	89 8b       	std	Y+17, r24	; 0x11
	size_t test;
	uint8_t ergebnis;
	uint8_t cnt = 0;
 446:	19 82       	std	Y+1, r1	; 0x01
    while (1)
    {
		i2c_wind_read(SLAVEADDR,rueckgabe,2);
 448:	ce 01       	movw	r24, r28
 44a:	40 96       	adiw	r24, 0x10	; 16
 44c:	42 e0       	ldi	r20, 0x02	; 2
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	bc 01       	movw	r22, r24
 452:	82 ee       	ldi	r24, 0xE2	; 226
 454:	0e 94 d7 01 	call	0x3ae	; 0x3ae <i2c_wind_read>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	aa e7       	ldi	r26, 0x7A	; 122
 45e:	b4 e4       	ldi	r27, 0x44	; 68
 460:	8a 83       	std	Y+2, r24	; 0x02
 462:	9b 83       	std	Y+3, r25	; 0x03
 464:	ac 83       	std	Y+4, r26	; 0x04
 466:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	4a ef       	ldi	r20, 0xFA	; 250
 46e:	53 e4       	ldi	r21, 0x43	; 67
 470:	6a 81       	ldd	r22, Y+2	; 0x02
 472:	7b 81       	ldd	r23, Y+3	; 0x03
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	9d 81       	ldd	r25, Y+5	; 0x05
 478:	0e 94 25 03 	call	0x64a	; 0x64a <__mulsf3>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	8e 83       	std	Y+6, r24	; 0x06
 482:	9f 83       	std	Y+7, r25	; 0x07
 484:	a8 87       	std	Y+8, r26	; 0x08
 486:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 e8       	ldi	r20, 0x80	; 128
 48e:	5f e3       	ldi	r21, 0x3F	; 63
 490:	6e 81       	ldd	r22, Y+6	; 0x06
 492:	7f 81       	ldd	r23, Y+7	; 0x07
 494:	88 85       	ldd	r24, Y+8	; 0x08
 496:	99 85       	ldd	r25, Y+9	; 0x09
 498:	0e 94 9f 02 	call	0x53e	; 0x53e <__cmpsf2>
 49c:	88 23       	and	r24, r24
 49e:	2c f4       	brge	.+10     	; 0x4aa <main+0x7e>
		__ticks = 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	8a 87       	std	Y+10, r24	; 0x0a
 4a6:	9b 87       	std	Y+11, r25	; 0x0b
 4a8:	3f c0       	rjmp	.+126    	; 0x528 <main+0xfc>
	else if (__tmp > 65535)
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	3f ef       	ldi	r19, 0xFF	; 255
 4ae:	4f e7       	ldi	r20, 0x7F	; 127
 4b0:	57 e4       	ldi	r21, 0x47	; 71
 4b2:	6e 81       	ldd	r22, Y+6	; 0x06
 4b4:	7f 81       	ldd	r23, Y+7	; 0x07
 4b6:	88 85       	ldd	r24, Y+8	; 0x08
 4b8:	99 85       	ldd	r25, Y+9	; 0x09
 4ba:	0e 94 20 03 	call	0x640	; 0x640 <__gesf2>
 4be:	18 16       	cp	r1, r24
 4c0:	4c f5       	brge	.+82     	; 0x514 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 e2       	ldi	r20, 0x20	; 32
 4c8:	51 e4       	ldi	r21, 0x41	; 65
 4ca:	6a 81       	ldd	r22, Y+2	; 0x02
 4cc:	7b 81       	ldd	r23, Y+3	; 0x03
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	0e 94 25 03 	call	0x64a	; 0x64a <__mulsf3>
 4d6:	dc 01       	movw	r26, r24
 4d8:	cb 01       	movw	r24, r22
 4da:	bc 01       	movw	r22, r24
 4dc:	cd 01       	movw	r24, r26
 4de:	0e 94 a4 02 	call	0x548	; 0x548 <__fixunssfsi>
 4e2:	dc 01       	movw	r26, r24
 4e4:	cb 01       	movw	r24, r22
 4e6:	8a 87       	std	Y+10, r24	; 0x0a
 4e8:	9b 87       	std	Y+11, r25	; 0x0b
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <main+0xde>
 4ec:	82 e3       	ldi	r24, 0x32	; 50
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	8c 87       	std	Y+12, r24	; 0x0c
 4f2:	9d 87       	std	Y+13, r25	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4f4:	8c 85       	ldd	r24, Y+12	; 0x0c
 4f6:	9d 85       	ldd	r25, Y+13	; 0x0d
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0xcc>
 4fc:	8c 87       	std	Y+12, r24	; 0x0c
 4fe:	9d 87       	std	Y+13, r25	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 500:	8a 85       	ldd	r24, Y+10	; 0x0a
 502:	9b 85       	ldd	r25, Y+11	; 0x0b
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	8a 87       	std	Y+10, r24	; 0x0a
 508:	9b 87       	std	Y+11, r25	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 50a:	8a 85       	ldd	r24, Y+10	; 0x0a
 50c:	9b 85       	ldd	r25, Y+11	; 0x0b
 50e:	89 2b       	or	r24, r25
 510:	69 f7       	brne	.-38     	; 0x4ec <main+0xc0>
 512:	14 c0       	rjmp	.+40     	; 0x53c <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 514:	6e 81       	ldd	r22, Y+6	; 0x06
 516:	7f 81       	ldd	r23, Y+7	; 0x07
 518:	88 85       	ldd	r24, Y+8	; 0x08
 51a:	99 85       	ldd	r25, Y+9	; 0x09
 51c:	0e 94 a4 02 	call	0x548	; 0x548 <__fixunssfsi>
 520:	dc 01       	movw	r26, r24
 522:	cb 01       	movw	r24, r22
 524:	8a 87       	std	Y+10, r24	; 0x0a
 526:	9b 87       	std	Y+11, r25	; 0x0b
 528:	8a 85       	ldd	r24, Y+10	; 0x0a
 52a:	9b 85       	ldd	r25, Y+11	; 0x0b
 52c:	8e 87       	std	Y+14, r24	; 0x0e
 52e:	9f 87       	std	Y+15, r25	; 0x0f
 530:	8e 85       	ldd	r24, Y+14	; 0x0e
 532:	9f 85       	ldd	r25, Y+15	; 0x0f
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <main+0x108>
 538:	8e 87       	std	Y+14, r24	; 0x0e
 53a:	9f 87       	std	Y+15, r25	; 0x0f
		_delay_ms(1000);
    }
 53c:	85 cf       	rjmp	.-246    	; 0x448 <main+0x1c>

0000053e <__cmpsf2>:
 53e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_cmp>
 542:	08 f4       	brcc	.+2      	; 0x546 <__cmpsf2+0x8>
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	08 95       	ret

00000548 <__fixunssfsi>:
 548:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 54c:	88 f0       	brcs	.+34     	; 0x570 <__fixunssfsi+0x28>
 54e:	9f 57       	subi	r25, 0x7F	; 127
 550:	98 f0       	brcs	.+38     	; 0x578 <__fixunssfsi+0x30>
 552:	b9 2f       	mov	r27, r25
 554:	99 27       	eor	r25, r25
 556:	b7 51       	subi	r27, 0x17	; 23
 558:	b0 f0       	brcs	.+44     	; 0x586 <__fixunssfsi+0x3e>
 55a:	e1 f0       	breq	.+56     	; 0x594 <__fixunssfsi+0x4c>
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	1a f0       	brmi	.+6      	; 0x56c <__fixunssfsi+0x24>
 566:	ba 95       	dec	r27
 568:	c9 f7       	brne	.-14     	; 0x55c <__fixunssfsi+0x14>
 56a:	14 c0       	rjmp	.+40     	; 0x594 <__fixunssfsi+0x4c>
 56c:	b1 30       	cpi	r27, 0x01	; 1
 56e:	91 f0       	breq	.+36     	; 0x594 <__fixunssfsi+0x4c>
 570:	0e 94 19 03 	call	0x632	; 0x632 <__fp_zero>
 574:	b1 e0       	ldi	r27, 0x01	; 1
 576:	08 95       	ret
 578:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_zero>
 57c:	67 2f       	mov	r22, r23
 57e:	78 2f       	mov	r23, r24
 580:	88 27       	eor	r24, r24
 582:	b8 5f       	subi	r27, 0xF8	; 248
 584:	39 f0       	breq	.+14     	; 0x594 <__fixunssfsi+0x4c>
 586:	b9 3f       	cpi	r27, 0xF9	; 249
 588:	cc f3       	brlt	.-14     	; 0x57c <__fixunssfsi+0x34>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b3 95       	inc	r27
 592:	d9 f7       	brne	.-10     	; 0x58a <__fixunssfsi+0x42>
 594:	3e f4       	brtc	.+14     	; 0x5a4 <__fixunssfsi+0x5c>
 596:	90 95       	com	r25
 598:	80 95       	com	r24
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	08 95       	ret

000005a6 <__fp_cmp>:
 5a6:	99 0f       	add	r25, r25
 5a8:	00 08       	sbc	r0, r0
 5aa:	55 0f       	add	r21, r21
 5ac:	aa 0b       	sbc	r26, r26
 5ae:	e0 e8       	ldi	r30, 0x80	; 128
 5b0:	fe ef       	ldi	r31, 0xFE	; 254
 5b2:	16 16       	cp	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	e8 07       	cpc	r30, r24
 5b8:	f9 07       	cpc	r31, r25
 5ba:	c0 f0       	brcs	.+48     	; 0x5ec <__fp_cmp+0x46>
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	e4 07       	cpc	r30, r20
 5c2:	f5 07       	cpc	r31, r21
 5c4:	98 f0       	brcs	.+38     	; 0x5ec <__fp_cmp+0x46>
 5c6:	62 1b       	sub	r22, r18
 5c8:	73 0b       	sbc	r23, r19
 5ca:	84 0b       	sbc	r24, r20
 5cc:	95 0b       	sbc	r25, r21
 5ce:	39 f4       	brne	.+14     	; 0x5de <__fp_cmp+0x38>
 5d0:	0a 26       	eor	r0, r26
 5d2:	61 f0       	breq	.+24     	; 0x5ec <__fp_cmp+0x46>
 5d4:	23 2b       	or	r18, r19
 5d6:	24 2b       	or	r18, r20
 5d8:	25 2b       	or	r18, r21
 5da:	21 f4       	brne	.+8      	; 0x5e4 <__fp_cmp+0x3e>
 5dc:	08 95       	ret
 5de:	0a 26       	eor	r0, r26
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <__fp_cmp+0x3e>
 5e2:	a1 40       	sbci	r26, 0x01	; 1
 5e4:	a6 95       	lsr	r26
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	81 1d       	adc	r24, r1
 5ea:	81 1d       	adc	r24, r1
 5ec:	08 95       	ret

000005ee <__fp_split3>:
 5ee:	57 fd       	sbrc	r21, 7
 5f0:	90 58       	subi	r25, 0x80	; 128
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	59 f0       	breq	.+22     	; 0x60e <__fp_splitA+0x10>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	71 f0       	breq	.+28     	; 0x618 <__fp_splitA+0x1a>
 5fc:	47 95       	ror	r20

000005fe <__fp_splitA>:
 5fe:	88 0f       	add	r24, r24
 600:	97 fb       	bst	r25, 7
 602:	99 1f       	adc	r25, r25
 604:	61 f0       	breq	.+24     	; 0x61e <__fp_splitA+0x20>
 606:	9f 3f       	cpi	r25, 0xFF	; 255
 608:	79 f0       	breq	.+30     	; 0x628 <__fp_splitA+0x2a>
 60a:	87 95       	ror	r24
 60c:	08 95       	ret
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	55 1f       	adc	r21, r21
 616:	f2 cf       	rjmp	.-28     	; 0x5fc <__fp_split3+0xe>
 618:	46 95       	lsr	r20
 61a:	f1 df       	rcall	.-30     	; 0x5fe <__fp_splitA>
 61c:	08 c0       	rjmp	.+16     	; 0x62e <__fp_splitA+0x30>
 61e:	16 16       	cp	r1, r22
 620:	17 06       	cpc	r1, r23
 622:	18 06       	cpc	r1, r24
 624:	99 1f       	adc	r25, r25
 626:	f1 cf       	rjmp	.-30     	; 0x60a <__fp_splitA+0xc>
 628:	86 95       	lsr	r24
 62a:	71 05       	cpc	r23, r1
 62c:	61 05       	cpc	r22, r1
 62e:	08 94       	sec
 630:	08 95       	ret

00000632 <__fp_zero>:
 632:	e8 94       	clt

00000634 <__fp_szero>:
 634:	bb 27       	eor	r27, r27
 636:	66 27       	eor	r22, r22
 638:	77 27       	eor	r23, r23
 63a:	cb 01       	movw	r24, r22
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__gesf2>:
 640:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_cmp>
 644:	08 f4       	brcc	.+2      	; 0x648 <__gesf2+0x8>
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	08 95       	ret

0000064a <__mulsf3>:
 64a:	0e 94 38 03 	call	0x670	; 0x670 <__mulsf3x>
 64e:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_round>
 652:	0e 94 9b 03 	call	0x736	; 0x736 <__fp_pscA>
 656:	38 f0       	brcs	.+14     	; 0x666 <__mulsf3+0x1c>
 658:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscB>
 65c:	20 f0       	brcs	.+8      	; 0x666 <__mulsf3+0x1c>
 65e:	95 23       	and	r25, r21
 660:	11 f0       	breq	.+4      	; 0x666 <__mulsf3+0x1c>
 662:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>
 666:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_nan>
 66a:	11 24       	eor	r1, r1
 66c:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>

00000670 <__mulsf3x>:
 670:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 674:	70 f3       	brcs	.-36     	; 0x652 <__mulsf3+0x8>

00000676 <__mulsf3_pse>:
 676:	95 9f       	mul	r25, r21
 678:	c1 f3       	breq	.-16     	; 0x66a <__mulsf3+0x20>
 67a:	95 0f       	add	r25, r21
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	55 1f       	adc	r21, r21
 680:	62 9f       	mul	r22, r18
 682:	f0 01       	movw	r30, r0
 684:	72 9f       	mul	r23, r18
 686:	bb 27       	eor	r27, r27
 688:	f0 0d       	add	r31, r0
 68a:	b1 1d       	adc	r27, r1
 68c:	63 9f       	mul	r22, r19
 68e:	aa 27       	eor	r26, r26
 690:	f0 0d       	add	r31, r0
 692:	b1 1d       	adc	r27, r1
 694:	aa 1f       	adc	r26, r26
 696:	64 9f       	mul	r22, r20
 698:	66 27       	eor	r22, r22
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	66 1f       	adc	r22, r22
 6a0:	82 9f       	mul	r24, r18
 6a2:	22 27       	eor	r18, r18
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	62 1f       	adc	r22, r18
 6aa:	73 9f       	mul	r23, r19
 6ac:	b0 0d       	add	r27, r0
 6ae:	a1 1d       	adc	r26, r1
 6b0:	62 1f       	adc	r22, r18
 6b2:	83 9f       	mul	r24, r19
 6b4:	a0 0d       	add	r26, r0
 6b6:	61 1d       	adc	r22, r1
 6b8:	22 1f       	adc	r18, r18
 6ba:	74 9f       	mul	r23, r20
 6bc:	33 27       	eor	r19, r19
 6be:	a0 0d       	add	r26, r0
 6c0:	61 1d       	adc	r22, r1
 6c2:	23 1f       	adc	r18, r19
 6c4:	84 9f       	mul	r24, r20
 6c6:	60 0d       	add	r22, r0
 6c8:	21 1d       	adc	r18, r1
 6ca:	82 2f       	mov	r24, r18
 6cc:	76 2f       	mov	r23, r22
 6ce:	6a 2f       	mov	r22, r26
 6d0:	11 24       	eor	r1, r1
 6d2:	9f 57       	subi	r25, 0x7F	; 127
 6d4:	50 40       	sbci	r21, 0x00	; 0
 6d6:	9a f0       	brmi	.+38     	; 0x6fe <__mulsf3_pse+0x88>
 6d8:	f1 f0       	breq	.+60     	; 0x716 <__mulsf3_pse+0xa0>
 6da:	88 23       	and	r24, r24
 6dc:	4a f0       	brmi	.+18     	; 0x6f0 <__mulsf3_pse+0x7a>
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	bb 1f       	adc	r27, r27
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	a9 f7       	brne	.-22     	; 0x6da <__mulsf3_pse+0x64>
 6f0:	9e 3f       	cpi	r25, 0xFE	; 254
 6f2:	51 05       	cpc	r21, r1
 6f4:	80 f0       	brcs	.+32     	; 0x716 <__mulsf3_pse+0xa0>
 6f6:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>
 6fa:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 6fe:	5f 3f       	cpi	r21, 0xFF	; 255
 700:	e4 f3       	brlt	.-8      	; 0x6fa <__mulsf3_pse+0x84>
 702:	98 3e       	cpi	r25, 0xE8	; 232
 704:	d4 f3       	brlt	.-12     	; 0x6fa <__mulsf3_pse+0x84>
 706:	86 95       	lsr	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b7 95       	ror	r27
 70e:	f7 95       	ror	r31
 710:	e7 95       	ror	r30
 712:	9f 5f       	subi	r25, 0xFF	; 255
 714:	c1 f7       	brne	.-16     	; 0x706 <__mulsf3_pse+0x90>
 716:	fe 2b       	or	r31, r30
 718:	88 0f       	add	r24, r24
 71a:	91 1d       	adc	r25, r1
 71c:	96 95       	lsr	r25
 71e:	87 95       	ror	r24
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__fp_inf>:
 724:	97 f9       	bld	r25, 7
 726:	9f 67       	ori	r25, 0x7F	; 127
 728:	80 e8       	ldi	r24, 0x80	; 128
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	08 95       	ret

00000730 <__fp_nan>:
 730:	9f ef       	ldi	r25, 0xFF	; 255
 732:	80 ec       	ldi	r24, 0xC0	; 192
 734:	08 95       	ret

00000736 <__fp_pscA>:
 736:	00 24       	eor	r0, r0
 738:	0a 94       	dec	r0
 73a:	16 16       	cp	r1, r22
 73c:	17 06       	cpc	r1, r23
 73e:	18 06       	cpc	r1, r24
 740:	09 06       	cpc	r0, r25
 742:	08 95       	ret

00000744 <__fp_pscB>:
 744:	00 24       	eor	r0, r0
 746:	0a 94       	dec	r0
 748:	12 16       	cp	r1, r18
 74a:	13 06       	cpc	r1, r19
 74c:	14 06       	cpc	r1, r20
 74e:	05 06       	cpc	r0, r21
 750:	08 95       	ret

00000752 <__fp_round>:
 752:	09 2e       	mov	r0, r25
 754:	03 94       	inc	r0
 756:	00 0c       	add	r0, r0
 758:	11 f4       	brne	.+4      	; 0x75e <__fp_round+0xc>
 75a:	88 23       	and	r24, r24
 75c:	52 f0       	brmi	.+20     	; 0x772 <__fp_round+0x20>
 75e:	bb 0f       	add	r27, r27
 760:	40 f4       	brcc	.+16     	; 0x772 <__fp_round+0x20>
 762:	bf 2b       	or	r27, r31
 764:	11 f4       	brne	.+4      	; 0x76a <__fp_round+0x18>
 766:	60 ff       	sbrs	r22, 0
 768:	04 c0       	rjmp	.+8      	; 0x772 <__fp_round+0x20>
 76a:	6f 5f       	subi	r22, 0xFF	; 255
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
